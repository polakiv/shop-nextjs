"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/effector";
exports.ids = ["vendor-chunks/effector"];
exports.modules = {

/***/ "(ssr)/./node_modules/effector/effector.mjs":
/*!********************************************!*\
  !*** ./node_modules/effector/effector.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allSettled: () => (/* binding */ C),\n/* harmony export */   attach: () => (/* binding */ v),\n/* harmony export */   clearNode: () => (/* binding */ vt),\n/* harmony export */   combine: () => (/* binding */ g),\n/* harmony export */   createApi: () => (/* binding */ k),\n/* harmony export */   createDomain: () => (/* binding */ w),\n/* harmony export */   createEffect: () => (/* binding */ b),\n/* harmony export */   createEvent: () => (/* binding */ p),\n/* harmony export */   createNode: () => (/* binding */ a),\n/* harmony export */   createStore: () => (/* binding */ h),\n/* harmony export */   createWatch: () => (/* binding */ D),\n/* harmony export */   fork: () => (/* binding */ O),\n/* harmony export */   forward: () => (/* binding */ St),\n/* harmony export */   fromObservable: () => (/* binding */ S),\n/* harmony export */   guard: () => (/* binding */ z),\n/* harmony export */   hydrate: () => (/* binding */ R),\n/* harmony export */   is: () => (/* binding */ ae),\n/* harmony export */   launch: () => (/* binding */ o),\n/* harmony export */   merge: () => (/* binding */ $),\n/* harmony export */   restore: () => (/* binding */ A),\n/* harmony export */   sample: () => (/* binding */ x),\n/* harmony export */   scopeBind: () => (/* binding */ F),\n/* harmony export */   serialize: () => (/* binding */ q),\n/* harmony export */   setGraphInspector: () => (/* binding */ he),\n/* harmony export */   setInspector: () => (/* binding */ ut),\n/* harmony export */   setStoreName: () => (/* binding */ i),\n/* harmony export */   split: () => (/* binding */ j),\n/* harmony export */   step: () => (/* binding */ Te),\n/* harmony export */   version: () => (/* binding */ Et),\n/* harmony export */   withFactory: () => (/* binding */ ke),\n/* harmony export */   withRegion: () => (/* binding */ n)\n/* harmony export */ });\nfunction e(e, t) {\n    for(const r in e)t(e[r], r);\n}\nfunction t(e, t) {\n    e.forEach(t);\n}\nfunction r(e, t, r) {\n    if (!e) throw Error(`${r ? r + \": \" : \"\"}${t}`);\n}\nfunction n(e, t) {\n    const r = E(e).meta || {};\n    ge = {\n        id: E(e).id,\n        parent: ge,\n        value: e,\n        template: r.template || be(),\n        sidRoot: r.sidRoot || ge && ge.sidRoot,\n        meta: r\n    };\n    try {\n        return t();\n    } finally{\n        ye(\"region\"), ge = H(ge);\n    }\n}\nfunction a({ node: e = [], from: r, source: n, parent: a = r || n, to: o, target: s, child: i = o || s, scope: c = {}, meta: l = {}, family: d = {\n    type: \"regular\"\n}, regional: u } = {}) {\n    const f = Se(a), p = Se(d.links), m = Se(d.owners), h = [];\n    t(e, (e)=>e && ie(h, e));\n    const g = {\n        id: fe(),\n        seq: h,\n        next: Se(i),\n        meta: l,\n        scope: c,\n        family: {\n            type: d.type || \"crosslink\",\n            links: p,\n            owners: m\n        }\n    };\n    return t(p, (e)=>ie(V(e), g)), t(m, (e)=>ie(T(e), g)), t(f, (e)=>ie(e.next, g)), u && ge && we(B(ge), [\n        g\n    ]), g;\n}\nfunction o(e, r, n) {\n    let a, o = at, s = null, i = et;\n    if (e.target && (r = e.params, n = e.defer, a = e.meta, o = \"page\" in e ? e.page : o, e.stack && (s = e.stack), i = U(e) || i, e = e.target), i && et && i !== et && (et = null), Array.isArray(e)) for(let t = 0; t < e.length; t++)Qe(\"pure\", o, E(e[t]), s, r[t], i, a);\n    else Qe(\"pure\", o, E(e), s, r, i, a);\n    if (n && !tt) return;\n    const c = {\n        isRoot: tt,\n        currentPage: at,\n        scope: et,\n        isWatch: rt,\n        isPure: nt\n    };\n    let l, d, u, f, p, m;\n    tt = 0;\n    e: for(; f = Ke();){\n        const { idx: e, stack: r, type: n } = f;\n        u = r.node, at = p = r.page, et = U(r), p ? m = p.reg : et && (m = et.reg);\n        const a = !!p, o = !!et, s = {\n            fail: 0,\n            scope: u.scope\n        };\n        l = d = 0;\n        for(let t = e; t < u.seq.length && !l; t++){\n            const i = u.seq[t];\n            if (i.order) {\n                const { priority: a, barrierID: o } = i.order, s = o ? p ? `${p.fullID}_${o}` : o : 0;\n                if (t !== e || n !== a) {\n                    o ? Ze.has(s) || (Ze.add(s), Xe(t, r, a, o)) : Xe(t, r, a, 0);\n                    continue e;\n                }\n                o && Ze.delete(s);\n            }\n            switch(i.type){\n                case \"mov\":\n                    {\n                        const e = i.data;\n                        let t;\n                        switch(e.from){\n                            case \"stack\":\n                                t = B(r);\n                                break;\n                            case \"a\":\n                            case \"b\":\n                                t = r[e.from];\n                                break;\n                            case \"value\":\n                                t = e.store;\n                                break;\n                            case \"store\":\n                                if (m && !m[e.store.id]) if (a) {\n                                    const t = ct(p, e.store.id);\n                                    r.page = p = t, t ? m = t.reg : o ? (pt(et, e.store, 0, 1, e.softRead), m = et.reg) : m = void 0;\n                                } else o && pt(et, e.store, 0, 1, e.softRead);\n                                t = Be(m && m[e.store.id] || e.store);\n                        }\n                        switch(e.to){\n                            case \"stack\":\n                                r.value = t;\n                                break;\n                            case \"a\":\n                            case \"b\":\n                                r[e.to] = t;\n                                break;\n                            case \"store\":\n                                lt(p, et, e.target, 0).current = t;\n                        }\n                        break;\n                    }\n                case \"compute\":\n                    const e1 = i.data;\n                    if (e1.fn) {\n                        rt = \"watch\" === u.meta.op, nt = e1.pure;\n                        const t = e1.safe ? (0, e1.fn)(B(r), s.scope, r) : mt(s, e1.fn, r);\n                        e1.filter ? d = !t : r.value = t, rt = c.isWatch, nt = c.isPure;\n                    }\n            }\n            l = s.fail || d;\n        }\n        if (dt && dt(r, s), !l) {\n            const e = B(r), n = U(r);\n            if (t(u.next, (t)=>{\n                Qe(\"child\", p, t, r, e, n);\n            }), n) {\n                u.meta.needFxCounter && Qe(\"child\", p, n.fxCount, r, e, n), u.meta.storeChange && Qe(\"child\", p, n.storeChange, r, e, n), u.meta.warnSerialize && Qe(\"child\", p, n.warnSerializeNode, r, e, n);\n                const a = n.additionalLinks[u.id];\n                a && t(a, (t)=>{\n                    Qe(\"child\", p, t, r, e, n);\n                });\n            }\n        }\n    }\n    tt = c.isRoot, at = c.currentPage, et = U(c);\n}\nfunction s(t, r = \"combine\") {\n    let n = r + \"(\", a = \"\", o = 0;\n    return e(t, (e)=>{\n        o < 25 && (null != e && (n += a, n += Q(e) ? K(e).fullName : e.toString()), o += 1, a = \", \");\n    }), n + \")\";\n}\nfunction i(e, t) {\n    e.shortName = t, Object.assign(K(e), c(t, H(e)));\n}\nfunction c(e, t) {\n    let r, n;\n    const a = e;\n    if (t) {\n        const a = K(t);\n        0 === e.length ? (r = a.path, n = a.fullName) : (r = a.path.concat([\n            e\n        ]), n = 0 === a.fullName.length ? e : a.fullName + \"/\" + e);\n    } else r = 0 === e.length ? [] : [\n        e\n    ], n = e;\n    return {\n        shortName: a,\n        fullName: n,\n        path: r\n    };\n}\nfunction l(e, t) {\n    if (!t) return e;\n    if (!t.name && !t.named && !t.loc) return e;\n    let r = `[${e}]`;\n    const n = t.named || t.name;\n    n && (r += ` unit '${n}'`);\n    const a = t.loc;\n    return !n && a && (r += ` (${a.file}:${a.line}:${a.column})`), r;\n}\nfunction d(e, t) {\n    const r = t ? e : e[0];\n    ze(r);\n    let n = r.or;\n    const a = r.and;\n    if (a) {\n        const r = t ? a : a[0];\n        if ($e(r) && \"and\" in r) {\n            const r = d(a, t);\n            e = r[0], n = {\n                ...n,\n                ...r[1]\n            };\n        } else e = a;\n    }\n    return [\n        e,\n        n\n    ];\n}\nfunction u(e) {\n    const t = ()=>e();\n    return t.unsubscribe = ()=>e(), t;\n}\nfunction f(e, ...t) {\n    const r = be();\n    if (r) {\n        const n = r.handlers[e];\n        if (n) return n(r, ...t);\n    }\n}\nfunction p(e, t) {\n    const n = ht({\n        or: t,\n        and: \"string\" == typeof e ? {\n            name: e\n        } : e\n    }), s = l(\"event\", n), i = (e, ...t)=>(r(!G(i, \"derived\"), \"call of derived event is not supported, use createEvent instead\", s), r(!nt, \"unit call from pure function is not supported, use operators like sample instead\", s), at ? ((e, t, r, n)=>{\n            const a = at;\n            let o = null;\n            if (t) for(o = at; o && o.template !== t;)o = H(o);\n            st(o);\n            const s = e.create(r, n);\n            return st(a), s;\n        })(i, c, e, t) : i.create(e, t)), c = be(), d = Object.assign(i, {\n        graphite: a({\n            meta: xt(n.actualOp || \"event\", i, n),\n            regional: 1\n        }),\n        create: (e)=>(o({\n                target: i,\n                params: e,\n                scope: et\n            }), e),\n        watch: (e)=>$t(i, e),\n        map: (e)=>zt(i, \"map\", e, [\n                Ve()\n            ]),\n        filter: (e)=>zt(i, \"filter\", e.fn ? e : e.fn, [\n                Ve(Oe, 1)\n            ]),\n        filterMap: (e)=>zt(i, \"filterMap\", e, [\n                Ve(),\n                _e((e)=>!xe(e), 1)\n            ]),\n        prepend (e) {\n            r(i.targetable, \".prepend of derived event is not supported, call source event instead\", s);\n            const t = p(\"* → \" + i.shortName, {\n                parent: H(i)\n            });\n            return f(\"eventPrepend\", E(t)), wt(t, i, [\n                Ve()\n            ], \"prepend\", e), Mt(i, t), t;\n        }\n    });\n    return null != n && n.domain && n.domain.hooks.event(d), J(d, \"id\", d.graphite.id), ye(d.graphite), d;\n}\nfunction m(e, n, a, o, s) {\n    return je(a, `${s} ${n}`, \"first argument\"), r(Me(o), \"second argument should be a function\", s), ce(!G(e, \"derived\"), `${n} in derived store`, `${n} in store created via createStore`, s), t(Array.isArray(a) ? a : [\n        a\n    ], (t)=>{\n        e.off(t), W(e).set(t, kt(jt(t, e, \"on\", Ie, o)));\n    }), e;\n}\nfunction h(e, n) {\n    const s = ht(n), i = Le(e), c = l(\"store\", s), d = p({\n        named: \"updates\",\n        derived: 1\n    });\n    f(\"storeBase\", i);\n    const u = i.id, g = \"skipVoid\" in s, y = g && !s.skipVoid;\n    ce(!(g && s.skipVoid), \"{skipVoid: true}\", \"updateFilter\", c);\n    const b = {\n        subscribers: new Map,\n        updates: d,\n        defaultState: e,\n        stateRef: i,\n        getState () {\n            let e, t = i;\n            if (at) {\n                let t = at;\n                for(; t && !t.reg[u];)t = H(t);\n                t && (e = t);\n            }\n            return !e && et && (pt(et, i, 1), e = et), e && (t = e.reg[u]), Be(t);\n        },\n        setState: (e)=>o({\n                target: b,\n                params: e,\n                defer: 1,\n                scope: et\n            }),\n        reset: (...e)=>(r(b.targetable, \".reset of derived store is not supported\", c), t(e, (e)=>m(b, \".reset\", e, ()=>b.defaultState, c)), b),\n        on: (e, t)=>(r(b.targetable, \".on of derived store is not supported\", c), m(b, \".on\", e, t, c)),\n        off (e) {\n            const t = W(b).get(e);\n            return t && (t(), W(b).delete(e)), b;\n        },\n        map (e, t) {\n            let r, n;\n            $e(e) && (r = e, e = e.fn);\n            const a = b.getState(), o = xe(a);\n            be() ? n = null : (!o || o && y) && (n = e(a));\n            const s = h(n, {\n                name: `${b.shortName} \\u2192 *`,\n                derived: 1,\n                ...t,\n                and: r\n            }), c = jt(b, s, \"map\", Oe, e);\n            return We(L(s), {\n                type: \"map\",\n                fn: e,\n                from: i\n            }), L(s).noInit = 1, f(\"storeMap\", i, c), s;\n        },\n        watch (e, t) {\n            if (ce(!t, \"watch second argument\", \"sample\", c), !t || !Q(e)) {\n                const t = $t(b, e);\n                return f(\"storeWatch\", i, e) || e(b.getState()), t;\n            }\n            return r(Me(t), \"second argument should be a function\", c), e.watch((e)=>t(b.getState(), e));\n        }\n    }, v = xt(\"store\", b, s), k = b.defaultConfig.updateFilter;\n    b.graphite = a({\n        scope: {\n            state: i,\n            fn: k\n        },\n        node: [\n            _e((e, t, r)=>(r.scope && !r.scope.reg[i.id] && (r.b = 1), e)),\n            Ee(i),\n            _e((e, t, { a: r, b: n })=>{\n                const a = xe(e);\n                return a && !g && console.error(`${c}: ${At}`), (a && y || !a) && (e !== r || n);\n            }, 1),\n            k && Ve(Ne, 1),\n            qe({\n                from: \"stack\",\n                target: i\n            })\n        ],\n        child: d,\n        meta: {\n            ...v,\n            defaultState: e\n        },\n        regional: 1\n    }), J(b, \"id\", b.graphite.id), J(b, \"rootStateRefId\", u);\n    const w = G(b, \"serialize\"), S = G(b, \"derived\"), $ = \"ignore\" === w, M = G(b, \"sid\");\n    M && (J(b, \"storeChange\", 1), i.sid = M), M || $ || S || J(b, \"warnSerialize\", 1);\n    const x = xe(e);\n    return r(S || !x || x && y, At, c), S && x && !g && console.error(`${c}: ${At}`), we(b, [\n        d\n    ]), null != s && s.domain && s.domain.hooks.store(b), S || (b.reinit = p({\n        named: \"reinit\"\n    }), b.reset(b.reinit)), i.meta = b.graphite.meta, ye(b.graphite), b;\n}\nfunction g(...e) {\n    let t, n, a;\n    [e, a] = d(e);\n    const o = l(\"combine\", a), s = e[e.length - 1], i = !Y(s) && $e(s), c = i && s, u = i ? e[e.length - 2] : s;\n    let f, p, m;\n    if (Me(u) ? (n = e.slice(0, i ? -2 : -1), t = u) : n = e, 1 === n.length) {\n        const e = n[0];\n        Y(e) || (f = e, p = 1);\n    }\n    if (!p && (f = n, t)) {\n        m = 1;\n        const e = t;\n        t = (t)=>e(...t);\n    }\n    return r($e(f), `${o}: shape should be an object`), Ct(Array.isArray(f), !m, f, a, t, c);\n}\nfunction y() {\n    const e = {};\n    return e.req = new Promise((t, r)=>{\n        e.rs = t, e.rj = r;\n    }), e.req.catch(()=>{}), e;\n}\nfunction b(e, t = {}) {\n    const n = ht(Me(e) ? {\n        handler: e\n    } : e, t), s = l(\"effect\", n), i = p(Me(e) ? {\n        handler: e\n    } : e, {\n        ...t,\n        actualOp: \"effect\"\n    }), c = E(i);\n    J(c, \"op\", i.kind = \"effect\"), i.use = (e)=>(r(Me(e), \".use argument should be a function\", s), b.scope.handler = e, i), i.use.getCurrent = ()=>b.scope.handler;\n    const d = i.finally = p({\n        named: \"finally\",\n        derived: 1\n    }), u = i.done = d.filterMap({\n        named: \"done\",\n        fn ({ status: e, params: t, result: r }) {\n            if (\"done\" === e) return {\n                params: t,\n                result: r\n            };\n        }\n    }), f = i.fail = d.filterMap({\n        named: \"fail\",\n        fn ({ status: e, params: t, error: r }) {\n            if (\"fail\" === e) return {\n                params: t,\n                error: r\n            };\n        }\n    }), m = i.doneData = u.map({\n        named: \"doneData\",\n        fn: ({ result: e })=>e\n    }), g = i.failData = f.map({\n        named: \"failData\",\n        fn: ({ error: e })=>e\n    }), b = a({\n        scope: {\n            handler: i.defaultConfig.handler || (()=>r(0, `no handler used in ${i.compositeName.fullName}`))\n        },\n        node: [\n            _e((e, t, r)=>{\n                let n = t.handler;\n                const a = U(r);\n                if (a) {\n                    const e = a.handlers.unitMap.get(i) || a.handlers.sidMap[i.sid];\n                    e && (n = e);\n                }\n                return e.handler = n, e;\n            }, 0, 1),\n            _e((e, t, r)=>{\n                if (t.runnerFn && !t.runnerFn(e, null, r)) return;\n                const { params: n, req: a, handler: o, args: s = [\n                    n\n                ] } = e, i = It(n, a, 1, d, r), c = It(n, a, 0, d, r), [l, u] = Nt(o, c, s);\n                l && ($e(u) && Me(u.then) ? u.then(i, c) : i(u));\n            }, 0, 1)\n        ],\n        meta: {\n            op: \"fx\",\n            fx: \"runner\"\n        }\n    });\n    c.scope.runner = b, ie(c.seq, _e((e, { runner: t }, r)=>{\n        const n = H(r) ? {\n            params: e,\n            req: {\n                rs (e) {},\n                rj (e) {}\n            }\n        } : e;\n        return r.meta || (r.meta = {\n            fxID: pe()\n        }), o({\n            target: t,\n            params: n,\n            defer: 1,\n            scope: U(r),\n            meta: r.meta\n        }), n.params;\n    })), i.create = (e)=>{\n        const t = y(), r = {\n            params: e,\n            req: t\n        };\n        if (et && !rt) {\n            const e = et;\n            t.req.finally(()=>{\n                ot(e);\n            }).catch(()=>{});\n        }\n        return o({\n            target: i,\n            params: r,\n            scope: et\n        }), t.req;\n    };\n    const v = i.inFlight = h(0, {\n        serialize: \"ignore\",\n        named: (G(i, \"name\") || i.graphite.id) + \".inFlight\"\n    }).on(i, (e)=>e + 1).on(d, (e)=>e - 1).map({\n        fn: (e)=>e,\n        named: \"inFlight\"\n    });\n    J(d, \"needFxCounter\", \"dec\"), J(i, \"needFxCounter\", 1);\n    const k = i.pending = v.map({\n        fn: (e)=>e > 0,\n        named: \"pending\"\n    });\n    return we(i, [\n        d,\n        u,\n        f,\n        m,\n        g,\n        k,\n        v\n    ]), null != n && n.domain && n.domain.hooks.effect(i), i;\n}\nfunction v(e) {\n    let t;\n    [e, t] = d(e, 1);\n    const n = l(\"attach\", t);\n    let { source: a, effect: s, mapParams: i, domain: u } = e;\n    ee(s) && r(xe(u), \"`domain` can only be used with a plain function\", n);\n    const f = b(e, t);\n    J(f, \"attached\", 1);\n    const { runner: p } = E(f).scope;\n    let m;\n    const h = (e, t, r)=>{\n        const { params: n, req: s, handler: c } = e, l = f.finally, d = It(n, s, 0, l, r), u = r.a, p = ee(c);\n        let m, h = 1;\n        if (i ? [h, m] = Nt(i, d, [\n            n,\n            u\n        ]) : m = a && p ? u : n, h) {\n            if (!p) return e.args = [\n                u,\n                m\n            ], 1;\n            o({\n                target: c,\n                params: {\n                    params: m,\n                    req: {\n                        rs: It(n, s, 1, l, r),\n                        rj: d\n                    }\n                },\n                page: r.page,\n                defer: 1,\n                meta: r.meta\n            });\n        }\n    };\n    if (a) {\n        let e;\n        p.scope.runnerFn = h, Y(a) ? (e = a, we(e, [\n            f\n        ])) : (e = g(a), we(f, [\n            e\n        ])), m = [\n            _e((e)=>e, 0, 1),\n            Ee(L(e))\n        ], delete p.seq[1].order;\n    } else m = [\n        _e(h, 1, 1)\n    ];\n    p.seq.splice(1, 0, ...m), f.use(s);\n    const y = H(s);\n    return y && (Object.assign(K(f), c(f.shortName, y)), f.defaultConfig.parent = y), Mt(s, f, \"effect\"), f;\n}\nfunction k(...t) {\n    let [[r, n], a] = d(t);\n    const o = {};\n    return e(n, (e, t)=>{\n        const n = o[t] = p(t, {\n            parent: H(r),\n            config: a\n        });\n        r.on(n, e), Mt(r, n);\n    }), o;\n}\nfunction w(r, n) {\n    const s = ht({\n        or: n,\n        and: \"string\" == typeof r ? {\n            name: r\n        } : r\n    }), i = a({\n        family: {\n            type: \"domain\"\n        },\n        regional: 1,\n        parent: (null == s ? void 0 : s.domain) || (null == s ? void 0 : s.parent)\n    }), c = {\n        history: {},\n        graphite: i,\n        hooks: {}\n    };\n    i.meta = xt(\"domain\", c, {\n        parent: (null == s ? void 0 : s.domain) || (null == s ? void 0 : s.parent),\n        or: {\n            ...s,\n            derived: 1\n        }\n    }), e({\n        Event: p,\n        Effect: b,\n        Store: h,\n        Domain: w\n    }, (e, r)=>{\n        const n = r.toLowerCase(), a = p({\n            named: `on${r}`\n        });\n        c.hooks[n] = a;\n        const s = new Set;\n        c.history[`${n}s`] = s, a.create = (e)=>(o(a, e), e), ie(E(a).seq, _e((e, t, r)=>(r.scope = null, e))), a.watch((e)=>{\n            we(c, [\n                e\n            ]), s.add(e), e.ownerSet || (e.ownerSet = s), H(e) || (e.parent = c);\n        }), we(c, [\n            a\n        ]), c[`onCreate${r}`] = (e)=>(t(s, e), a.watch(e)), c[`create${r}`] = c[n] = (t, r)=>{\n            const n = ht({\n                and: r,\n                or: t\n            });\n            return null != n && n.domain ? e(t, r) : a(e(t, {\n                parent: c,\n                or: n\n            }));\n        };\n    });\n    const l = H(c);\n    return l && e(c.hooks, (e, t)=>wt(e, l.hooks[t])), null != s && s.domain && s.domain.hooks.domain(c), c;\n}\nfunction S(e) {\n    ze(e);\n    const t = _ in e ? e[_]() : e;\n    r(t.subscribe, \"expect observable to have .subscribe\");\n    const n = p(), a = kt(n);\n    return t.subscribe({\n        next: n,\n        error: a,\n        complete: a\n    }), n;\n}\nfunction $(e, t) {\n    const r = l(\"merge\", t);\n    je(e, r, \"first argument\");\n    const n = p({\n        name: s(e, \"merge\"),\n        derived: 1,\n        and: t\n    });\n    return wt(e, n, [], \"merge\"), n;\n}\nfunction M(e, n) {\n    let a = 0;\n    return t(Rt, (t)=>{\n        t in e && (r(null != e[t], Ft(n, t)), a = 1);\n    }), a;\n}\nfunction x(...e) {\n    let t, r, n, a, [[o, s, i], c] = d(e), u = 1;\n    const f = l(\"sample\", c);\n    return xe(s) && $e(o) && M(o, f) && (s = o.clock, i = o.fn, \"batch\" in o ? u = o.batch : (ce(!(\"greedy\" in o), \"greedy in sample\", \"batch\", f), u = !o.greedy), a = o.filter, t = o.target, r = o.name, n = o.sid, o = o.source), qt(\"sample\", s, o, a, t, i, r, c, u, 1, 0, n);\n}\nfunction z(...e) {\n    let [[t, r], n] = d(e);\n    const a = l(\"guard\", n);\n    return ce(0, \"guard\", \"sample\", a), r || (r = t, t = r.source), M(r, a), qt(\"guard\", r.clock, t, r.filter, r.target, null, r.name, n, !r.greedy, 0, 1);\n}\nfunction A(t, n, a) {\n    const o = l(\"restore\", a);\n    if (r(!Y(t), \"restore($store) is not supported\", o), Z(t) || ee(t)) {\n        const e = H(t), r = h(n, {\n            parent: e,\n            name: t.shortName,\n            and: a\n        });\n        return wt(ee(t) ? t.doneData : t, r), e && e.hooks.store(r), r;\n    }\n    const s = Array.isArray(t) ? [] : {};\n    return e(t, (e, t)=>s[t] = Y(e) ? e : h(e, {\n            name: t\n        })), s;\n}\nfunction j(...t) {\n    const n = \"split\";\n    let o, s, [[i, c], u] = d(t);\n    const m = l(n, u), h = !c;\n    h && (o = i.cases, c = i.match, s = i.clock, i = i.source);\n    const g = Y(c), y = !Q(c) && Me(c), b = !g && !y && $e(c);\n    r(Q(i), \"source must be a unit\", m), o || (o = {}), h ? e(o, (e, t)=>Ce(m, e, `cases.${t}`)) : (r(b, \"match should be an object\", m), e(c, (e, t)=>o[t] = p({\n            derived: 1,\n            named: `cases.${t}`,\n            and: u\n        })), o.__ = p({\n        derived: 1,\n        named: \"cases.__\",\n        and: u\n    }));\n    const v = new Set([].concat(i, s || [], Object.values(o))), k = Object.keys(g || y ? o : c);\n    let w;\n    if (g || y) g && v.add(c), w = [\n        g && Ee(L(c), 0, 1),\n        De({\n            safe: g,\n            filter: 1,\n            pure: !g,\n            fn (e, t, r) {\n                const n = String(g ? r.a : c(e));\n                _t(t, oe(k, n) ? n : \"__\", e, r);\n            }\n        })\n    ];\n    else if (b) {\n        const t = Le({});\n        t.type = \"shape\";\n        const r = [];\n        let n;\n        e(c, (e, a)=>{\n            if (Q(e)) {\n                n = 1, ie(r, a), v.add(e);\n                const o = wt(e, [], [\n                    Ee(t),\n                    _e((e, t, { a: r })=>r[a] = e)\n                ]);\n                if (Y(e)) {\n                    t.current[a] = e.getState();\n                    const r = L(e);\n                    We(t, {\n                        from: r,\n                        field: a,\n                        type: \"field\"\n                    }), f(\"splitMatchStore\", r, o);\n                }\n            }\n        }), n && f(\"splitBase\", t), w = [\n            n && Ee(t, 0, 1),\n            Ve((e, t, n)=>{\n                for(let a = 0; a < k.length; a++){\n                    const o = k[a];\n                    if (oe(r, o) ? n.a[o] : c[o](e)) return void _t(t, o, e, n);\n                }\n                _t(t, \"__\", e, n);\n            }, 1)\n        ];\n    } else r(0, \"expect match to be unit, function or object\");\n    const S = a({\n        meta: {\n            op: n\n        },\n        parent: s ? [] : i,\n        scope: o,\n        node: w,\n        family: {\n            owners: Array.from(v)\n        },\n        regional: 1\n    });\n    if (s && qt(n, s, i, null, S, null, n, u, 0, 0, 0), !h) return o;\n}\nfunction C(e, { scope: t, params: r } = {}) {\n    if (!Q(e)) return Promise.reject(new Error(\"first argument should be unit\"));\n    if (!(ee(e) || Z(e) || Y(e) || ne(e))) return Promise.reject(new Error(\"first argument accepts only effects, events, stores or scopes\"));\n    if (ne(e)) t = e;\n    else if (!te(e)) {\n        const t = l(\"allSettled\", E(e).meta);\n        return Promise.reject(Error(`${t}: unit should be targetable`));\n    }\n    const n = y();\n    n.parentFork = et;\n    const { fxCount: a } = t;\n    ie(a.scope.defers, n);\n    const s = [], i = [];\n    return ne(e) || (ie(s, e), ie(i, ee(e) ? {\n        params: r,\n        req: {\n            rs (e) {\n                n.value = {\n                    status: \"done\",\n                    value: e\n                };\n            },\n            rj (e) {\n                n.value = {\n                    status: \"fail\",\n                    value: e\n                };\n            }\n        }\n    } : r)), ie(s, a), ie(i, null), o({\n        target: s,\n        params: i,\n        scope: t\n    }), n.req;\n}\nfunction N(e, r, n) {\n    const a = [];\n    (function e(o) {\n        oe(a, o) || (ie(a, o), \"store\" === G(o, \"op\") && (n || G(o, \"sid\")) && r(o, G(o, \"sid\")), t(o.next, e), t(V(o), e), t(T(o), e));\n    })(e);\n}\nfunction I(e, n) {\n    const a = Array.isArray(e) ? new Map(e) : e, o = new Map;\n    let s = 0;\n    if (a instanceof Map) {\n        const e = {};\n        return t(a, (t, a)=>{\n            r(Q(a), \"Map key should be a unit\"), n && n(a, t), a.sid && (a.sid in e && (s = 1), e[a.sid] = t), o.set(a, t);\n        }), {\n            sidMap: e,\n            unitMap: o,\n            hasSidDoubles: s\n        };\n    }\n    return {\n        sidMap: a,\n        unitMap: o\n    };\n}\nfunction O(e, n) {\n    let o, s = e;\n    re(e) && (ce(0, \"fork(domain)\", \"fork()\"), o = e, s = n);\n    const i = ((e)=>{\n        const r = a({\n            scope: {\n                defers: [],\n                inFlight: 0,\n                fxID: 0\n            },\n            node: [\n                _e((e, t, r)=>{\n                    r.parent ? \"dec\" === r.parent.node.meta.needFxCounter ? t.inFlight -= 1 : (t.inFlight += 1, t.fxID += 1) : t.fxID += 1;\n                }),\n                De({\n                    priority: \"sampler\",\n                    batch: 1\n                }),\n                _e((e, r)=>{\n                    const { defers: n, fxID: a } = r;\n                    r.inFlight > 0 || 0 === n.length || Promise.resolve().then(()=>{\n                        r.fxID === a && t(n.splice(0, n.length), (e)=>{\n                            ot(e.parentFork), e.rs(e.value);\n                        });\n                    });\n                }, 0, 1)\n            ]\n        }), n = a({\n            node: [\n                _e((e, t, r)=>{\n                    const n = r.parent;\n                    if (n) {\n                        const t = n.node;\n                        if (Vt(n)) {\n                            const n = U(r), a = t.meta.sid;\n                            n.sidIdMap[a] = t.scope.state.id, n.values.sidMap[a] = e;\n                            const o = t.meta.serialize;\n                            o && n.sidSerializeSettings.set(a, \"ignore\" === o ? {\n                                ignore: 1\n                            } : {\n                                ignore: 0,\n                                write: o.write\n                            });\n                        }\n                    }\n                })\n            ]\n        }), o = a({\n            node: [\n                _e((e, t, r)=>{\n                    const n = U(r);\n                    n && r.parent && Vt(r.parent) && (n.warnSerialize = 1);\n                })\n            ]\n        }), s = {\n            cloneOf: e,\n            reg: {},\n            values: {\n                sidMap: {},\n                idMap: {}\n            },\n            sidIdMap: {},\n            sidSerializeSettings: new Map,\n            getState (e) {\n                if (\"current\" in e) return lt(at, s, e, 0).current;\n                const t = E(e);\n                return lt(at, s, t.scope.state, 1).current;\n            },\n            kind: \"scope\",\n            graphite: a({\n                family: {\n                    type: \"domain\",\n                    links: [\n                        r,\n                        n,\n                        o\n                    ]\n                },\n                meta: {\n                    unit: \"fork\"\n                },\n                scope: {\n                    forkInFlightCounter: r\n                }\n            }),\n            additionalLinks: {},\n            handlers: {\n                sidMap: {},\n                unitMap: new Map\n            },\n            fxCount: r,\n            storeChange: n,\n            warnSerializeNode: o\n        };\n        return s;\n    })(o);\n    if (s) {\n        if (s.values) {\n            const { sidMap: e, unitMap: n, hasSidDoubles: a } = I(s.values, (e)=>r(Y(e) && te(e), \"Values map can contain only writable stores as keys\"));\n            Object.assign(i.values.sidMap, e), t(n, (e, t)=>{\n                if (i.values.idMap[t.stateRef.id] = e, i.sidIdMap[G(t, \"sid\")] = t.stateRef.id, \"ignore\" === G(t, \"serialize\")) {\n                    const e = G(t, \"sid\");\n                    i.sidSerializeSettings.set(e, {\n                        ignore: 1\n                    });\n                }\n            }), i.fromSerialize = !(Array.isArray(s.values) || s.values instanceof Map), i.hasSidDoubles = a;\n        }\n        s.handlers && (ce(s.handlers instanceof Map || Array.isArray(s.handlers), \"object with handlers\", \"array\"), i.handlers = I(s.handlers, (e)=>r(ee(e), \"Handlers map can contain only effects as keys\")));\n    }\n    return i;\n}\nfunction R(e, { values: n }) {\n    r($e(n), \"values property should be an object\");\n    const { sidMap: a, unitMap: s } = I(n), i = Object.getOwnPropertyNames(a), c = {};\n    t(s, (e, t)=>{\n        c[t.stateRef.id] = t;\n    });\n    const l = [], d = [];\n    let u, f, p;\n    ne(e) ? (u = e, p = 1, r(u.cloneOf, \"scope should be created from domain\"), ce(0, \"hydrate(fork(domain), { values })\", \"fork({ values })\"), f = E(u.cloneOf)) : re(e) ? (ce(0, \"hydrate(domain, { values })\", \"fork({ values })\"), f = E(e)) : r(0, \"first argument of hydrate should be domain or scope\"), N(f, (e, t)=>{\n        if (t && oe(i, t)) {\n            ie(l, e);\n            const r = G(e, \"serialize\");\n            r && \"ignore\" !== r && (a[t] = r.read(a[t])), ie(d, a[t]);\n        } else e.scope.state.id in c && (ie(l, e), ie(d, s.get(c[e.scope.state.id])));\n    }, 1), o({\n        target: l,\n        params: d,\n        scope: u\n    }), p && Object.assign(u.values.sidMap, a);\n}\nfunction F(e, { scope: t, safe: n } = {}) {\n    r(t || et || n, \"scopeBind: scope not found\");\n    const a = t || et;\n    return (t)=>{\n        function r() {\n            ot(s);\n        }\n        let n, o = 0;\n        const s = et;\n        ot(a);\n        try {\n            n = e(t);\n        } catch (e) {\n            n = e, o = 1;\n        }\n        if (r(), o) throw n;\n        return n instanceof Promise && n.then(r, r), n;\n    };\n}\nfunction q(t, n = {}) {\n    t.warnSerialize && console.error(\"There is a store without sid in this scope, its value is omitted\"), r(!t.hasSidDoubles, \"duplicate sid found in this scope\");\n    const a = n.ignore ? n.ignore.map(({ sid: e })=>e) : [], o = {};\n    return e(t.values.sidMap, (e, r)=>{\n        var n;\n        if (oe(a, r)) return;\n        const s = t.sidIdMap[r], i = null !== (n = t.sidSerializeSettings.get(r)) && void 0 !== n ? n : {\n            ignore: 0,\n            write: Tt\n        };\n        i.ignore || (o[r] = (0, i.write)(s && s in t.reg ? t.reg[s].current : e));\n    }), \"onlyChanges\" in n && (ce(0, \"onlyChanges\"), n.onlyChanges || (r(t.cloneOf, \"scope should be created from domain\"), N(E(t.cloneOf), (e, r)=>{\n        r in o || oe(a, r) || G(e, \"isCombine\") || \"ignore\" === G(e, \"serialize\") || (o[r] = t.getState(e));\n    }))), o;\n}\nfunction D({ unit: e, fn: t, scope: r, batch: n }) {\n    const o = [\n        Te.run({\n            fn: (e)=>t(e)\n        })\n    ];\n    n && o.unshift(Te.compute({\n        priority: \"sampler\",\n        batch: 1\n    })), Y(e) && o.unshift(Te.mov({\n        store: e.stateRef,\n        to: \"stack\"\n    }));\n    const s = Array.isArray(e) ? e : [\n        e\n    ];\n    if (r) {\n        const e = [], t = r.additionalLinks;\n        return s.forEach((r)=>{\n            const n = t[r.graphite.id] || [];\n            t[r.graphite.id] = n;\n            const s = a({\n                node: P(o, r),\n                meta: {\n                    watchOp: r.kind\n                }\n            });\n            n.push(s), e.push(()=>{\n                const e = n.indexOf(s);\n                -1 !== e && n.splice(e, 1), vt(s);\n            });\n        }), u(()=>{\n            e.forEach((e)=>e());\n        });\n    }\n    {\n        const e = a({\n            node: o,\n            parent: s,\n            family: {\n                owners: s\n            }\n        });\n        return u(()=>{\n            vt(e);\n        });\n    }\n}\nfunction P(e, t) {\n    return Y(t) ? [\n        Te.mov({\n            store: t.stateRef,\n            to: \"stack\"\n        }),\n        ...e\n    ] : e;\n}\nconst _ = \"undefined\" != typeof Symbol && Symbol.observable || \"@@observable\", E = (e)=>e.graphite || e, V = (e)=>e.family.owners, T = (e)=>e.family.links, L = (e)=>e.stateRef, B = (e)=>e.value, W = (e)=>e.subscribers, H = (e)=>e.parent, U = (e)=>e.scope, G = (e, t)=>E(e).meta[t], J = (e, t, r)=>E(e).meta[t] = r, K = (e)=>e.compositeName, Q = (e)=>(Me(e) || $e(e)) && \"kind\" in e, X = (e)=>(t)=>Q(t) && t.kind === e, Y = X(\"store\"), Z = X(\"event\"), ee = X(\"effect\"), te = (e)=>Q(e) && !!e.targetable, re = X(\"domain\"), ne = X(\"scope\");\nvar ae = {\n    __proto__: null,\n    unit: Q,\n    store: Y,\n    event: Z,\n    effect: ee,\n    targetable: te,\n    domain: re,\n    scope: ne,\n    attached: (e)=>ee(e) && 1 == G(e, \"attached\")\n};\nconst oe = (e, t)=>e.includes(t), se = (e, t)=>{\n    const r = e.indexOf(t);\n    -1 !== r && e.splice(r, 1);\n}, ie = (e, t)=>e.push(t), ce = (e, t, r, n)=>!e && console.error(`${n ? n + \": \" : \"\"}${t} is deprecated${r ? `, use ${r} instead` : \"\"}`), le = ()=>{\n    let e = 0;\n    return ()=>\"\" + ++e;\n}, de = le(), ue = le(), fe = le(), pe = le();\nlet me;\nconst he = (e)=>{\n    me = e;\n};\nlet ge = null;\nconst ye = (e)=>{\n    me && me(e, ge);\n}, be = ()=>ge && ge.template, ve = (e)=>(e && ge && ge.sidRoot && (e = `${ge.sidRoot}|${e}`), e), ke = ({ sid: e, name: t, loc: r, method: o, fn: s })=>n(a({\n        meta: {\n            sidRoot: ve(e),\n            sid: e,\n            name: t,\n            loc: r,\n            method: o,\n            type: \"factory\"\n        }\n    }), s), we = (e, r)=>{\n    const n = E(e);\n    t(r, (e)=>{\n        const t = E(e);\n        \"domain\" !== n.family.type && (t.family.type = \"crosslink\"), ie(V(t), n), ie(T(n), t);\n    });\n}, Se = (e = [])=>(Array.isArray(e) ? e : [\n        e\n    ]).flat().map(E), $e = (e)=>\"object\" == typeof e && null !== e, Me = (e)=>\"function\" == typeof e, xe = (e)=>void 0 === e, ze = (e)=>r($e(e) || Me(e), \"expect first argument be an object\"), Ae = (e, t, n, a)=>r(!(!$e(e) && !Me(e) || !(\"family\" in e) && !(\"graphite\" in e)), `${t}: expect ${n} to be a unit (store, event or effect)${a}`), je = (e, r, n)=>{\n    Array.isArray(e) ? t(e, (e, t)=>Ae(e, r, `${t} item of ${n}`, \"\")) : Ae(e, r, n, \" or array of units\");\n}, Ce = (e, n, a = \"target\")=>t(Se(n), (t)=>r(!G(t, \"derived\"), `${e}: derived unit in \"${a}\" is not supported, use createStore/createEvent instead\"`)), Ne = (e, { fn: t }, { a: r })=>t(e, r), Ie = (e, { fn: t }, { a: r })=>t(r, e), Oe = (e, { fn: t })=>t(e), Re = (e, t, r, n)=>{\n    const a = {\n        id: ue(),\n        type: e,\n        data: t\n    };\n    return r && (a.order = {\n        priority: r\n    }, n && (a.order.barrierID = ++Fe)), a;\n};\nlet Fe = 0;\nconst qe = ({ from: e = \"store\", store: t, target: r, to: n = r ? \"store\" : \"stack\", batch: a, priority: o })=>Re(\"mov\", {\n        from: e,\n        store: t,\n        to: n,\n        target: r\n    }, o, a), De = ({ fn: e, batch: t, priority: r, safe: n = 0, filter: a = 0, pure: o = 0 })=>Re(\"compute\", {\n        fn: e,\n        safe: n,\n        filter: a,\n        pure: o\n    }, r, t), Pe = ({ fn: e })=>De({\n        fn: e,\n        priority: \"effect\"\n    }), _e = (e, t, r)=>De({\n        fn: e,\n        safe: 1,\n        filter: t,\n        priority: r && \"effect\"\n    }), Ee = (e, t, r)=>qe({\n        store: e,\n        to: t ? \"stack\" : \"a\",\n        priority: r && \"sampler\",\n        batch: 1\n    }), Ve = (e = Oe, t)=>De({\n        fn: e,\n        pure: 1,\n        filter: t\n    }), Te = {\n    mov: qe,\n    compute: De,\n    filter: ({ fn: e, pure: t })=>De({\n            fn: e,\n            filter: 1,\n            pure: t\n        }),\n    run: Pe\n}, Le = (e)=>({\n        id: ue(),\n        current: e,\n        initial: e\n    }), Be = ({ current: e })=>e, We = (e, t)=>{\n    e.before || (e.before = []), ie(e.before, t);\n};\nlet He = null;\nconst Ue = (e, t)=>{\n    if (!e) return t;\n    if (!t) return e;\n    let r;\n    return (e.v.type === t.v.type && e.v.id > t.v.id || Ye(e.v.type) > Ye(t.v.type)) && (r = e, e = t, t = r), r = Ue(e.r, t), e.r = e.l, e.l = r, e;\n}, Ge = [];\nlet Je = 0;\nfor(; Je < 6;)ie(Ge, {\n    first: null,\n    last: null,\n    size: 0\n}), Je += 1;\nconst Ke = ()=>{\n    for(let e = 0; e < 6; e++){\n        const t = Ge[e];\n        if (t.size > 0) {\n            if (3 === e || 4 === e) {\n                t.size -= 1;\n                const e = He.v;\n                return He = Ue(He.l, He.r), e;\n            }\n            1 === t.size && (t.last = null);\n            const r = t.first;\n            return t.first = r.r, t.size -= 1, r.v;\n        }\n    }\n}, Qe = (e, t, r, n, a, o, s)=>Xe(0, {\n        a: null,\n        b: null,\n        node: r,\n        parent: n,\n        value: a,\n        page: t,\n        scope: o,\n        meta: s\n    }, e, 0), Xe = (e, t, r, n)=>{\n    const a = Ye(r), o = Ge[a], s = {\n        v: {\n            idx: e,\n            stack: t,\n            type: r,\n            id: n\n        },\n        l: null,\n        r: null\n    };\n    3 === a || 4 === a ? He = Ue(He, s) : (0 === o.size ? o.first = s : o.last.r = s, o.last = s), o.size += 1;\n}, Ye = (e)=>{\n    switch(e){\n        case \"child\":\n            return 0;\n        case \"pure\":\n            return 1;\n        case \"read\":\n            return 2;\n        case \"barrier\":\n            return 3;\n        case \"sampler\":\n            return 4;\n        case \"effect\":\n            return 5;\n        default:\n            return -1;\n    }\n}, Ze = new Set;\nlet et, tt = 1, rt = 0, nt = 0, at = null;\nconst ot = (e)=>{\n    et = e;\n}, st = (e)=>{\n    at = e;\n}, ct = (e, t)=>{\n    if (e) {\n        for(; e && !e.reg[t];)e = e.parent;\n        if (e) return e;\n    }\n    return null;\n}, lt = (e, t, r, n)=>{\n    const a = ct(e, r.id);\n    return a ? a.reg[r.id] : t ? (pt(t, r, n), t.reg[r.id]) : r;\n};\nlet dt;\nconst ut = (e)=>{\n    dt = e;\n}, ft = (e)=>e, pt = (e, r, n, a, o)=>{\n    const s = e.reg;\n    if (s[r.id]) return;\n    const i = r.sid, c = {\n        id: r.id,\n        current: r.initial,\n        meta: r.meta\n    };\n    if (c.id in e.values.idMap) c.current = e.values.idMap[c.id];\n    else if (i && i in e.values.sidMap && !(i in e.sidIdMap)) {\n        var l;\n        const t = null == r || null === (l = r.meta) || void 0 === l ? void 0 : l.serialize;\n        c.current = (e.fromSerialize && \"ignore\" !== t && (null == t ? void 0 : t.read) || ft)(e.values.sidMap[i]);\n    } else if (r.before && !o) {\n        let o = 0;\n        const i = n || !r.noInit || a;\n        t(r.before, (t)=>{\n            switch(t.type){\n                case \"map\":\n                    {\n                        const r = t.from;\n                        if ((r || t.fn) && (r && pt(e, r, n, a), i)) {\n                            const e = r && s[r.id].current;\n                            c.current = t.fn ? t.fn(e) : e;\n                        }\n                        break;\n                    }\n                case \"field\":\n                    pt(e, t.from, n, a), o || (o = 1, c.current = Array.isArray(c.current) ? [\n                        ...c.current\n                    ] : {\n                        ...c.current\n                    }), i && (c.current[t.field] = s[s[t.from.id].id].current);\n            }\n        });\n    }\n    i && (e.sidIdMap[i] = r.id), s[r.id] = c;\n}, mt = (e, t, r)=>{\n    try {\n        return t(B(r), e.scope, r);\n    } catch (t) {\n        console.error(t), e.fail = 1, e.failReason = t;\n    }\n}, ht = (t, r = {})=>($e(t) && (ht(t.or, r), e(t, (e, t)=>{\n        xe(e) || \"or\" === t || \"and\" === t || (r[t] = e);\n    }), ht(t.and, r)), r), gt = (e, t)=>{\n    se(e.next, t), se(V(e), t), se(T(e), t);\n}, yt = (e, t, r)=>{\n    let n;\n    e.next.length = 0, e.seq.length = 0, e.scope = null;\n    let a = T(e);\n    for(; n = a.pop();)gt(n, e), (t || r && \"sample\" !== e.meta.op || \"crosslink\" === n.family.type) && yt(n, t, \"on\" !== n.meta.op && r);\n    for(a = V(e); n = a.pop();)gt(n, e), r && \"crosslink\" === n.family.type && yt(n, t, \"on\" !== n.meta.op && r);\n}, bt = (e)=>e.clear(), vt = (e, { deep: t } = {})=>{\n    let r = 0;\n    if (e.ownerSet && e.ownerSet.delete(e), Y(e)) bt(W(e));\n    else if (re(e)) {\n        r = 1;\n        const t = e.history;\n        bt(t.events), bt(t.effects), bt(t.stores), bt(t.domains);\n    }\n    yt(E(e), !!t, r);\n}, kt = (e)=>u(()=>vt(e)), wt = (e, t, r, n, o)=>a({\n        node: r,\n        parent: e,\n        child: t,\n        scope: {\n            fn: o\n        },\n        meta: {\n            op: n\n        },\n        family: {\n            owners: [\n                e,\n                t\n            ],\n            links: t\n        },\n        regional: 1\n    }), St = (e)=>{\n    const t = \"forward\", [{ from: r, to: n }, o] = d(e, 1), s = l(t, o);\n    return ce(0, t, \"sample\", s), je(r, s, '\"from\"'), je(n, s, '\"to\"'), Ce(s, n, \"to\"), kt(a({\n        parent: r,\n        child: n,\n        meta: {\n            op: t,\n            config: o\n        },\n        family: {},\n        regional: 1\n    }));\n}, $t = (e, t)=>(r(Me(t), \".watch argument should be a function\"), kt(a({\n        scope: {\n            fn: t\n        },\n        node: [\n            Pe({\n                fn: Oe\n            })\n        ],\n        parent: e,\n        meta: {\n            op: \"watch\"\n        },\n        family: {\n            owners: e\n        },\n        regional: 1\n    }))), Mt = (e, t, r = \"event\")=>{\n    H(e) && H(e).hooks[r](t);\n}, xt = (e, t, r)=>{\n    const n = ht(r), a = \"domain\" === e, o = de(), { sid: s = null, named: i = null, domain: l = null, parent: d = l } = n, u = i || n.name || (a ? \"\" : o), f = c(u, d), p = {\n        op: t.kind = e,\n        name: t.shortName = u,\n        sid: t.sid = ve(s),\n        named: i,\n        unitId: t.id = o,\n        serialize: n.serialize,\n        derived: n.derived,\n        config: n\n    };\n    if (t.targetable = !n.derived, t.parent = d, t.compositeName = f, t.defaultConfig = n, t.getType = ()=>(ce(0, \"getType\", \"compositeName.fullName\"), f.fullName), !a) {\n        t.subscribe = (e)=>(ze(e), t.watch(Me(e) ? e : (t)=>e.next && e.next(t))), t[_] = ()=>t;\n        const e = be();\n        e && (p.nativeTemplate = e);\n    }\n    return p;\n}, zt = (e, t, r, n)=>{\n    let a;\n    $e(r) && (a = r, r = r.fn);\n    const o = p({\n        name: `${e.shortName} \\u2192 *`,\n        derived: 1,\n        and: a\n    });\n    return wt(e, o, n, t, r), o;\n}, At = \"undefined is used to skip updates. To allow undefined as a value provide explicit { skipVoid: false } option\", jt = (e, t, r, n, a)=>{\n    const o = L(t), s = qe({\n        store: o,\n        to: \"a\",\n        priority: \"read\"\n    });\n    \"map\" === r && (s.data.softRead = 1);\n    const i = [\n        s,\n        Ve(n)\n    ];\n    return f(\"storeOnMap\", o, i, Y(e) && L(e)), wt(e, t, i, r, a);\n}, Ct = (t, n, a, o, i, c)=>{\n    const d = l(\"combine\", o), u = t ? (e)=>[\n            ...e\n        ] : (e)=>({\n            ...e\n        }), p = t ? [] : {}, m = u(p), g = Le(m), y = Le(1);\n    g.type = t ? \"list\" : \"shape\", g.noInit = 1, f(\"combineBase\", g, y);\n    const b = h(m, {\n        name: s(a),\n        derived: 1,\n        ...c,\n        and: o\n    }), v = L(b);\n    v.noInit = 1, J(b, \"isCombine\", 1);\n    const k = Ee(g);\n    k.order = {\n        priority: \"barrier\"\n    };\n    const w = qe({\n        store: v,\n        to: \"b\",\n        priority: \"read\"\n    });\n    w.data.softRead = 1;\n    const S = [\n        _e((e, t, r)=>(r.scope && !r.scope.reg[g.id] && (r.c = 1), e)),\n        k,\n        qe({\n            store: y,\n            to: \"b\"\n        }),\n        _e((e, { key: t }, r)=>{\n            if (r.c || e !== r.a[t]) return n && r.b && (r.a = u(r.a)), r.a[t] = e, 1;\n        }, 1),\n        qe({\n            from: \"a\",\n            target: g\n        }),\n        qe({\n            from: \"value\",\n            store: 0,\n            target: y\n        }),\n        qe({\n            from: \"value\",\n            store: 1,\n            target: y,\n            priority: \"barrier\",\n            batch: 1\n        }),\n        Ee(g, 1, 1),\n        i && Ve(),\n        w\n    ];\n    if (e(a, (e, t)=>{\n        if (!Y(e)) return r(!Q(e) && !xe(e), `combine expects a store in a field ${t}`, d), void (m[t] = p[t] = e);\n        p[t] = e.defaultState, m[t] = e.getState();\n        const n = wt(e, b, S, \"combine\", i);\n        n.scope.key = t;\n        const a = L(e);\n        We(g, {\n            type: \"field\",\n            field: t,\n            from: a\n        }), f(\"combineField\", a, n);\n    }), b.defaultShape = a, We(v, {\n        type: \"map\",\n        from: g,\n        fn: i\n    }), !be()) if (i) {\n        const e = i(m);\n        !xe(e) || c && \"skipVoid\" in c || console.error(`${d}: ${At}`), v.current = e, v.initial = e, b.defaultState = e;\n    } else b.defaultState = p;\n    return b;\n}, Nt = (e, t, r)=>{\n    try {\n        return [\n            1,\n            e(...r)\n        ];\n    } catch (e) {\n        return t(e), [\n            0,\n            null\n        ];\n    }\n}, It = (e, t, r, n, a)=>(s)=>{\n        o({\n            target: [\n                n,\n                Ot\n            ],\n            params: [\n                r ? {\n                    status: \"done\",\n                    params: e,\n                    result: s\n                } : {\n                    status: \"fail\",\n                    params: e,\n                    error: s\n                },\n                {\n                    value: s,\n                    fn: r ? t.rs : t.rj\n                }\n            ],\n            defer: 1,\n            page: a.page,\n            scope: a.scope,\n            meta: a.meta\n        });\n    }, Ot = a({\n    node: [\n        Pe({\n            fn: ({ fn: e, value: t })=>e(t)\n        })\n    ],\n    meta: {\n        op: \"fx\",\n        fx: \"sidechain\"\n    }\n}), Rt = [\n    \"source\",\n    \"clock\",\n    \"target\"\n], Ft = (e, t)=>e + `: ${t} should be defined`, qt = (e, t, n, a, o, s, i, c, d, u, m, y)=>{\n    const b = l(e, c), v = !!o;\n    r(!xe(n) || !xe(t), Ft(b, \"either source or clock\"));\n    let k = 0;\n    xe(n) ? k = 1 : Q(n) || (n = g(n)), xe(t) ? t = n : (je(t, b, \"clock\"), Array.isArray(t) && (t = $(t))), k && (n = t), c || i || (i = n.shortName);\n    let w = \"none\";\n    (m || a) && (Q(a) ? w = \"unit\" : (r(Me(a), \"`filter` should be function or unit\"), w = \"fn\")), o ? (je(o, b, \"target\"), Ce(b, o)) : \"none\" === w && u && Y(n) && Y(t) ? o = h(s ? s(Be(L(n)), Be(L(t))) : Be(L(n)), {\n        name: i,\n        sid: y,\n        or: c\n    }) : (o = p({\n        name: i,\n        derived: 1,\n        or: c\n    }), f(\"sampleTarget\", E(o)));\n    const S = Le();\n    let M = [];\n    if (\"unit\" === w) {\n        const [r, n, s] = Pt(a, o, t, S, e);\n        s || M.push(...Dt(n)), M.push(...Dt(r));\n    }\n    const x = [];\n    if (k) d && x.push(Ee(S, 1, 1));\n    else {\n        const [r, a, s] = Pt(n, o, t, S, e);\n        s || x.push(...Dt(a)), x.push(Ee(r, 1, d));\n    }\n    const z = wt(t, o, [\n        f(\"sampleSourceLoader\"),\n        qe({\n            from: \"stack\",\n            target: S\n        }),\n        ...x,\n        ...M,\n        Ee(S),\n        \"fn\" === w && Ve((e, t, { a: r })=>a(e, r), 1),\n        s && Ve(Ne),\n        f(\"sampleSourceUpward\", v)\n    ], e, s);\n    return we(n, [\n        z\n    ]), Object.assign(z.meta, c, {\n        joint: 1\n    }), o;\n}, Dt = (e)=>[\n        Ee(e),\n        _e((e, t, { a: r })=>r, 1)\n    ], Pt = (e, t, r, n, o)=>{\n    const s = Y(e), i = s ? L(e) : Le(), c = Le(s);\n    return s || a({\n        parent: e,\n        node: [\n            qe({\n                from: \"stack\",\n                target: i\n            }),\n            qe({\n                from: \"value\",\n                store: 1,\n                target: c\n            })\n        ],\n        family: {\n            owners: [\n                e,\n                t,\n                r\n            ],\n            links: t\n        },\n        meta: {\n            op: o\n        },\n        regional: 1\n    }), f(\"sampleSource\", c, i, n), [\n        i,\n        c,\n        s\n    ];\n}, _t = (e, t, r, n)=>{\n    const a = e[t];\n    a && o({\n        target: a,\n        params: Array.isArray(a) ? a.map(()=>r) : r,\n        defer: 1,\n        stack: n\n    });\n}, Et = \"23.2.0\", Vt = (e)=>!e.node.meta.isCombine || e.parent && \"combine\" !== e.parent.node.meta.op, Tt = (e)=>e;\n //# sourceMappingURL=effector.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effector/effector.mjs\n");

/***/ })

};
;