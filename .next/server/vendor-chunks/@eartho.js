"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@eartho";
exports.ids = ["vendor-chunks/@eartho"];
exports.modules = {

/***/ "(ssr)/./node_modules/@eartho/one-client-react/dist/one-client-react.esm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@eartho/one-client-react/dist/one-client-react.esm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EarthoOneContext: () => (/* binding */ EarthoOneContext),\n/* harmony export */   EarthoOneProvider: () => (/* binding */ EarthoOneProvider),\n/* harmony export */   InMemoryCache: () => (/* binding */ oa),\n/* harmony export */   LocalStorageCache: () => (/* binding */ ra),\n/* harmony export */   OAuthError: () => (/* binding */ OAuthError),\n/* harmony export */   User: () => (/* binding */ Ra),\n/* harmony export */   useEarthoOne: () => (/* binding */ useEarthoOne),\n/* harmony export */   withAuthenticationRequired: () => (/* binding */ withAuthenticationRequired),\n/* harmony export */   withEarthoOne: () => (/* binding */ withEarthoOne)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ var e = function(t, n) {\n    return e = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(e, t) {\n        e.__proto__ = t;\n    } || function(e, t) {\n        for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n    }, e(t, n);\n};\nfunction t(t, n) {\n    if (\"function\" != typeof n && null !== n) throw new TypeError(\"Class extends value \" + String(n) + \" is not a constructor or null\");\n    function r() {\n        this.constructor = t;\n    }\n    e(t, n), t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r);\n}\nvar n = function() {\n    return n = Object.assign || function(e) {\n        for(var t, n = 1, r = arguments.length; n < r; n++)for(var o in t = arguments[n])Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n        return e;\n    }, n.apply(this, arguments);\n};\nfunction r(e, t) {\n    var n = {};\n    for(var r in e)Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);\n    if (null != e && \"function\" == typeof Object.getOwnPropertySymbols) {\n        var o = 0;\n        for(r = Object.getOwnPropertySymbols(e); o < r.length; o++)t.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[o]) && (n[r[o]] = e[r[o]]);\n    }\n    return n;\n}\nfunction o(e, t, n, r) {\n    return new (n || (n = Promise))(function(o, i) {\n        function c(e) {\n            try {\n                s(r.next(e));\n            } catch (e) {\n                i(e);\n            }\n        }\n        function a(e) {\n            try {\n                s(r.throw(e));\n            } catch (e) {\n                i(e);\n            }\n        }\n        function s(e) {\n            var t;\n            e.done ? o(e.value) : (t = e.value, t instanceof n ? t : new n(function(e) {\n                e(t);\n            })).then(c, a);\n        }\n        s((r = r.apply(e, t || [])).next());\n    });\n}\nfunction i(e, t) {\n    var n, r, o, i, c = {\n        label: 0,\n        sent: function() {\n            if (1 & o[0]) throw o[1];\n            return o[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return i = {\n        next: a(0),\n        throw: a(1),\n        return: a(2)\n    }, \"function\" == typeof Symbol && (i[Symbol.iterator] = function() {\n        return this;\n    }), i;\n    function a(i) {\n        return function(a) {\n            return function(i) {\n                if (n) throw new TypeError(\"Generator is already executing.\");\n                for(; c;)try {\n                    if (n = 1, r && (o = 2 & i[0] ? r.return : i[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, i[1])).done) return o;\n                    switch(r = 0, o && (i = [\n                        2 & i[0],\n                        o.value\n                    ]), i[0]){\n                        case 0:\n                        case 1:\n                            o = i;\n                            break;\n                        case 4:\n                            return c.label++, {\n                                value: i[1],\n                                done: !1\n                            };\n                        case 5:\n                            c.label++, r = i[1], i = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            i = c.ops.pop(), c.trys.pop();\n                            continue;\n                        default:\n                            if (!(o = c.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {\n                                c = 0;\n                                continue;\n                            }\n                            if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {\n                                c.label = i[1];\n                                break;\n                            }\n                            if (6 === i[0] && c.label < o[1]) {\n                                c.label = o[1], o = i;\n                                break;\n                            }\n                            if (o && c.label < o[2]) {\n                                c.label = o[2], c.ops.push(i);\n                                break;\n                            }\n                            o[2] && c.ops.pop(), c.trys.pop();\n                            continue;\n                    }\n                    i = t.call(e, c);\n                } catch (e) {\n                    i = [\n                        6,\n                        e\n                    ], r = 0;\n                } finally{\n                    n = o = 0;\n                }\n                if (5 & i[0]) throw i[1];\n                return {\n                    value: i[0] ? i[1] : void 0,\n                    done: !0\n                };\n            }([\n                i,\n                a\n            ]);\n        };\n    }\n}\nfunction c(e, t) {\n    var n = \"function\" == typeof Symbol && e[Symbol.iterator];\n    if (!n) return e;\n    var r, o, i = n.call(e), c = [];\n    try {\n        for(; (void 0 === t || t-- > 0) && !(r = i.next()).done;)c.push(r.value);\n    } catch (e) {\n        o = {\n            error: e\n        };\n    } finally{\n        try {\n            r && !r.done && (n = i.return) && n.call(i);\n        } finally{\n            if (o) throw o.error;\n        }\n    }\n    return c;\n}\nfunction a(e, t, n) {\n    if (n || 2 === arguments.length) for(var r, o = 0, i = t.length; o < i; o++)!r && o in t || (r || (r = Array.prototype.slice.call(t, 0, o)), r[o] = t[o]);\n    return e.concat(r || Array.prototype.slice.call(t));\n}\nvar s = \"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\nfunction u(e) {\n    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nfunction l(e, t) {\n    return e(t = {\n        exports: {}\n    }, t.exports), t.exports;\n}\nvar f, d, h = function(e) {\n    return e && e.Math == Math && e;\n}, p = h(\"object\" == typeof globalThis && globalThis) || h( false && 0) || h(\"object\" == typeof self && self) || h(\"object\" == typeof s && s) || function() {\n    return this;\n}() || Function(\"return this\")(), y = function(e) {\n    try {\n        return !!e();\n    } catch (e) {\n        return !0;\n    }\n}, v = !y(function() {\n    return 7 != Object.defineProperty({}, 1, {\n        get: function() {\n            return 7;\n        }\n    })[1];\n}), m = !y(function() {\n    var e = (function() {}).bind();\n    return \"function\" != typeof e || e.hasOwnProperty(\"prototype\");\n}), b = Function.prototype.call, g = m ? b.bind(b) : function() {\n    return b.apply(b, arguments);\n}, w = {}.propertyIsEnumerable, S = Object.getOwnPropertyDescriptor, _ = S && !w.call({\n    1: 2\n}, 1) ? function(e) {\n    var t = S(this, e);\n    return !!t && t.enumerable;\n} : w, k = {\n    f: _\n}, O = function(e, t) {\n    return {\n        enumerable: !(1 & e),\n        configurable: !(2 & e),\n        writable: !(4 & e),\n        value: t\n    };\n}, I = Function.prototype, T = I.bind, E = I.call, x = m && T.bind(E, E), C = m ? function(e) {\n    return e && x(e);\n} : function(e) {\n    return e && function() {\n        return E.apply(e, arguments);\n    };\n}, j = C({}.toString), R = C(\"\".slice), P = function(e) {\n    return R(j(e), 8, -1);\n}, U = Object, A = C(\"\".split), F = y(function() {\n    return !U(\"z\").propertyIsEnumerable(0);\n}) ? function(e) {\n    return \"String\" == P(e) ? A(e, \"\") : U(e);\n} : U, K = TypeError, W = function(e) {\n    if (null == e) throw K(\"Can't call method on \" + e);\n    return e;\n}, L = function(e) {\n    return F(W(e));\n}, Z = function(e) {\n    return \"function\" == typeof e;\n}, G = function(e) {\n    return \"object\" == typeof e ? null !== e : Z(e);\n}, X = function(e) {\n    return Z(e) ? e : void 0;\n}, V = function(e, t) {\n    return arguments.length < 2 ? X(p[e]) : p[e] && p[e][t];\n}, N = C({}.isPrototypeOf), D = V(\"navigator\", \"userAgent\") || \"\", Y = p.process, B = p.Deno, M = Y && Y.versions || B && B.version, J = M && M.v8;\nJ && (d = (f = J.split(\".\"))[0] > 0 && f[0] < 4 ? 1 : +(f[0] + f[1])), !d && D && (!(f = D.match(/Edge\\/(\\d+)/)) || f[1] >= 74) && (f = D.match(/Chrome\\/(\\d+)/)) && (d = +f[1]);\nvar z = d, H = !!Object.getOwnPropertySymbols && !y(function() {\n    var e = Symbol();\n    return !String(e) || !(Object(e) instanceof Symbol) || !Symbol.sham && z && z < 41;\n}), q = H && !Symbol.sham && \"symbol\" == typeof Symbol.iterator, Q = Object, $ = q ? function(e) {\n    return \"symbol\" == typeof e;\n} : function(e) {\n    var t = V(\"Symbol\");\n    return Z(t) && N(t.prototype, Q(e));\n}, ee = String, te = function(e) {\n    try {\n        return ee(e);\n    } catch (e) {\n        return \"Object\";\n    }\n}, ne = TypeError, re = function(e) {\n    if (Z(e)) return e;\n    throw ne(te(e) + \" is not a function\");\n}, oe = function(e, t) {\n    var n = e[t];\n    return null == n ? void 0 : re(n);\n}, ie = TypeError, ce = Object.defineProperty, ae = function(e, t) {\n    try {\n        ce(p, e, {\n            value: t,\n            configurable: !0,\n            writable: !0\n        });\n    } catch (n) {\n        p[e] = t;\n    }\n    return t;\n}, se = p[\"__core-js_shared__\"] || ae(\"__core-js_shared__\", {}), ue = l(function(e) {\n    (e.exports = function(e, t) {\n        return se[e] || (se[e] = void 0 !== t ? t : {});\n    })(\"versions\", []).push({\n        version: \"3.23.1\",\n        mode: \"global\",\n        copyright: \"\\xa9 2014-2022 Denis Pushkarev (zloirock.ru)\",\n        license: \"https://github.com/zloirock/core-js/blob/v3.23.1/LICENSE\",\n        source: \"https://github.com/zloirock/core-js\"\n    });\n}), le = Object, fe = function(e) {\n    return le(W(e));\n}, de = C({}.hasOwnProperty), he = Object.hasOwn || function(e, t) {\n    return de(fe(e), t);\n}, pe = 0, ye = Math.random(), ve = C(1..toString), me = function(e) {\n    return \"Symbol(\" + (void 0 === e ? \"\" : e) + \")_\" + ve(++pe + ye, 36);\n}, be = ue(\"wks\"), ge = p.Symbol, we = ge && ge.for, Se = q ? ge : ge && ge.withoutSetter || me, _e = function(e) {\n    if (!he(be, e) || !H && \"string\" != typeof be[e]) {\n        var t = \"Symbol.\" + e;\n        H && he(ge, e) ? be[e] = ge[e] : be[e] = q && we ? we(t) : Se(t);\n    }\n    return be[e];\n}, ke = TypeError, Oe = _e(\"toPrimitive\"), Ie = function(e, t) {\n    if (!G(e) || $(e)) return e;\n    var n, r = oe(e, Oe);\n    if (r) {\n        if (void 0 === t && (t = \"default\"), n = g(r, e, t), !G(n) || $(n)) return n;\n        throw ke(\"Can't convert object to primitive value\");\n    }\n    return void 0 === t && (t = \"number\"), function(e, t) {\n        var n, r;\n        if (\"string\" === t && Z(n = e.toString) && !G(r = g(n, e))) return r;\n        if (Z(n = e.valueOf) && !G(r = g(n, e))) return r;\n        if (\"string\" !== t && Z(n = e.toString) && !G(r = g(n, e))) return r;\n        throw ie(\"Can't convert object to primitive value\");\n    }(e, t);\n}, Te = function(e) {\n    var t = Ie(e, \"string\");\n    return $(t) ? t : t + \"\";\n}, Ee = p.document, xe = G(Ee) && G(Ee.createElement), Ce = function(e) {\n    return xe ? Ee.createElement(e) : {};\n}, je = !v && !y(function() {\n    return 7 != Object.defineProperty(Ce(\"div\"), \"a\", {\n        get: function() {\n            return 7;\n        }\n    }).a;\n}), Re = Object.getOwnPropertyDescriptor, Pe = {\n    f: v ? Re : function(e, t) {\n        if (e = L(e), t = Te(t), je) try {\n            return Re(e, t);\n        } catch (e) {}\n        if (he(e, t)) return O(!g(k.f, e, t), e[t]);\n    }\n}, Ue = v && y(function() {\n    return 42 != Object.defineProperty(function() {}, \"prototype\", {\n        value: 42,\n        writable: !1\n    }).prototype;\n}), Ae = String, Fe = TypeError, Ke = function(e) {\n    if (G(e)) return e;\n    throw Fe(Ae(e) + \" is not an object\");\n}, We = TypeError, Le = Object.defineProperty, Ze = Object.getOwnPropertyDescriptor, Ge = {\n    f: v ? Ue ? function(e, t, n) {\n        if (Ke(e), t = Te(t), Ke(n), \"function\" == typeof e && \"prototype\" === t && \"value\" in n && \"writable\" in n && !n.writable) {\n            var r = Ze(e, t);\n            r && r.writable && (e[t] = n.value, n = {\n                configurable: \"configurable\" in n ? n.configurable : r.configurable,\n                enumerable: \"enumerable\" in n ? n.enumerable : r.enumerable,\n                writable: !1\n            });\n        }\n        return Le(e, t, n);\n    } : Le : function(e, t, n) {\n        if (Ke(e), t = Te(t), Ke(n), je) try {\n            return Le(e, t, n);\n        } catch (e) {}\n        if (\"get\" in n || \"set\" in n) throw We(\"Accessors not supported\");\n        return \"value\" in n && (e[t] = n.value), e;\n    }\n}, Xe = v ? function(e, t, n) {\n    return Ge.f(e, t, O(1, n));\n} : function(e, t, n) {\n    return e[t] = n, e;\n}, Ve = Function.prototype, Ne = v && Object.getOwnPropertyDescriptor, De = he(Ve, \"name\"), Ye = {\n    EXISTS: De,\n    PROPER: De && \"something\" === (function() {}).name,\n    CONFIGURABLE: De && (!v || v && Ne(Ve, \"name\").configurable)\n}, Be = C(Function.toString);\nZ(se.inspectSource) || (se.inspectSource = function(e) {\n    return Be(e);\n});\nvar Me, Je, ze, He = se.inspectSource, qe = p.WeakMap, Qe = Z(qe) && /native code/.test(He(qe)), $e = ue(\"keys\"), et = function(e) {\n    return $e[e] || ($e[e] = me(e));\n}, tt = {}, nt = p.TypeError, rt = p.WeakMap;\nif (Qe || se.state) {\n    var ot = se.state || (se.state = new rt), it = C(ot.get), ct = C(ot.has), at = C(ot.set);\n    Me = function(e, t) {\n        if (ct(ot, e)) throw new nt(\"Object already initialized\");\n        return t.facade = e, at(ot, e, t), t;\n    }, Je = function(e) {\n        return it(ot, e) || {};\n    }, ze = function(e) {\n        return ct(ot, e);\n    };\n} else {\n    var st = et(\"state\");\n    tt[st] = !0, Me = function(e, t) {\n        if (he(e, st)) throw new nt(\"Object already initialized\");\n        return t.facade = e, Xe(e, st, t), t;\n    }, Je = function(e) {\n        return he(e, st) ? e[st] : {};\n    }, ze = function(e) {\n        return he(e, st);\n    };\n}\nvar ut = {\n    set: Me,\n    get: Je,\n    has: ze,\n    enforce: function(e) {\n        return ze(e) ? Je(e) : Me(e, {});\n    },\n    getterFor: function(e) {\n        return function(t) {\n            var n;\n            if (!G(t) || (n = Je(t)).type !== e) throw nt(\"Incompatible receiver, \" + e + \" required\");\n            return n;\n        };\n    }\n}, lt = l(function(e) {\n    var t = Ye.CONFIGURABLE, n = ut.enforce, r = ut.get, o = Object.defineProperty, i = v && !y(function() {\n        return 8 !== o(function() {}, \"length\", {\n            value: 8\n        }).length;\n    }), c = String(String).split(\"String\"), a = e.exports = function(e, r, a) {\n        \"Symbol(\" === String(r).slice(0, 7) && (r = \"[\" + String(r).replace(/^Symbol\\(([^)]*)\\)/, \"$1\") + \"]\"), a && a.getter && (r = \"get \" + r), a && a.setter && (r = \"set \" + r), (!he(e, \"name\") || t && e.name !== r) && o(e, \"name\", {\n            value: r,\n            configurable: !0\n        }), i && a && he(a, \"arity\") && e.length !== a.arity && o(e, \"length\", {\n            value: a.arity\n        });\n        try {\n            a && he(a, \"constructor\") && a.constructor ? v && o(e, \"prototype\", {\n                writable: !1\n            }) : e.prototype && (e.prototype = void 0);\n        } catch (e) {}\n        var s = n(e);\n        return he(s, \"source\") || (s.source = c.join(\"string\" == typeof r ? r : \"\")), e;\n    };\n    Function.prototype.toString = a(function() {\n        return Z(this) && r(this).source || He(this);\n    }, \"toString\");\n}), ft = function(e, t, n, r) {\n    r || (r = {});\n    var o = r.enumerable, i = void 0 !== r.name ? r.name : t;\n    return Z(n) && lt(n, i, r), r.global ? o ? e[t] = n : ae(t, n) : (r.unsafe ? e[t] && (o = !0) : delete e[t], o ? e[t] = n : Ge.f(e, t, {\n        value: n,\n        enumerable: !1,\n        configurable: !r.nonConfigurable,\n        writable: !r.nonWritable\n    })), e;\n}, dt = Math.ceil, ht = Math.floor, pt = Math.trunc || function(e) {\n    var t = +e;\n    return (t > 0 ? ht : dt)(t);\n}, yt = function(e) {\n    var t = +e;\n    return t != t || 0 === t ? 0 : pt(t);\n}, vt = Math.max, mt = Math.min, bt = function(e, t) {\n    var n = yt(e);\n    return n < 0 ? vt(n + t, 0) : mt(n, t);\n}, gt = Math.min, wt = function(e) {\n    return e > 0 ? gt(yt(e), 9007199254740991) : 0;\n}, St = function(e) {\n    return wt(e.length);\n}, _t = function(e) {\n    return function(t, n, r) {\n        var o, i = L(t), c = St(i), a = bt(r, c);\n        if (e && n != n) {\n            for(; c > a;)if ((o = i[a++]) != o) return !0;\n        } else for(; c > a; a++)if ((e || a in i) && i[a] === n) return e || a || 0;\n        return !e && -1;\n    };\n}, kt = {\n    includes: _t(!0),\n    indexOf: _t(!1)\n}, Ot = kt.indexOf, It = C([].push), Tt = function(e, t) {\n    var n, r = L(e), o = 0, i = [];\n    for(n in r)!he(tt, n) && he(r, n) && It(i, n);\n    for(; t.length > o;)he(r, n = t[o++]) && (~Ot(i, n) || It(i, n));\n    return i;\n}, Et = [\n    \"constructor\",\n    \"hasOwnProperty\",\n    \"isPrototypeOf\",\n    \"propertyIsEnumerable\",\n    \"toLocaleString\",\n    \"toString\",\n    \"valueOf\"\n], xt = Et.concat(\"length\", \"prototype\"), Ct = {\n    f: Object.getOwnPropertyNames || function(e) {\n        return Tt(e, xt);\n    }\n}, jt = {\n    f: Object.getOwnPropertySymbols\n}, Rt = C([].concat), Pt = V(\"Reflect\", \"ownKeys\") || function(e) {\n    var t = Ct.f(Ke(e)), n = jt.f;\n    return n ? Rt(t, n(e)) : t;\n}, Ut = function(e, t, n) {\n    for(var r = Pt(t), o = Ge.f, i = Pe.f, c = 0; c < r.length; c++){\n        var a = r[c];\n        he(e, a) || n && he(n, a) || o(e, a, i(t, a));\n    }\n}, At = /#|\\.prototype\\./, Ft = function(e, t) {\n    var n = Wt[Kt(e)];\n    return n == Zt || n != Lt && (Z(t) ? y(t) : !!t);\n}, Kt = Ft.normalize = function(e) {\n    return String(e).replace(At, \".\").toLowerCase();\n}, Wt = Ft.data = {}, Lt = Ft.NATIVE = \"N\", Zt = Ft.POLYFILL = \"P\", Gt = Ft, Xt = Pe.f, Vt = function(e, t) {\n    var n, r, o, i, c, a = e.target, s = e.global, u = e.stat;\n    if (n = s ? p : u ? p[a] || ae(a, {}) : (p[a] || {}).prototype) for(r in t){\n        if (i = t[r], o = e.dontCallGetSet ? (c = Xt(n, r)) && c.value : n[r], !Gt(s ? r : a + (u ? \".\" : \"#\") + r, e.forced) && void 0 !== o) {\n            if (typeof i == typeof o) continue;\n            Ut(i, o);\n        }\n        (e.sham || o && o.sham) && Xe(i, \"sham\", !0), ft(n, r, i, e);\n    }\n}, Nt = {};\nNt[_e(\"toStringTag\")] = \"z\";\nvar Dt, Yt = \"[object z]\" === String(Nt), Bt = _e(\"toStringTag\"), Mt = Object, Jt = \"Arguments\" == P(function() {\n    return arguments;\n}()), zt = Yt ? P : function(e) {\n    var t, n, r;\n    return void 0 === e ? \"Undefined\" : null === e ? \"Null\" : \"string\" == typeof (n = function(e, t) {\n        try {\n            return e[t];\n        } catch (e) {}\n    }(t = Mt(e), Bt)) ? n : Jt ? P(t) : \"Object\" == (r = P(t)) && Z(t.callee) ? \"Arguments\" : r;\n}, Ht = String, qt = function(e) {\n    if (\"Symbol\" === zt(e)) throw TypeError(\"Cannot convert a Symbol value to a string\");\n    return Ht(e);\n}, Qt = _e(\"match\"), $t = TypeError, en = function(e) {\n    if (function(e) {\n        var t;\n        return G(e) && (void 0 !== (t = e[Qt]) ? !!t : \"RegExp\" == P(e));\n    }(e)) throw $t(\"The method doesn't accept regular expressions\");\n    return e;\n}, tn = _e(\"match\"), nn = function(e) {\n    var t = /./;\n    try {\n        \"/./\"[e](t);\n    } catch (n) {\n        try {\n            return t[tn] = !1, \"/./\"[e](t);\n        } catch (e) {}\n    }\n    return !1;\n}, rn = Pe.f, on = C(\"\".startsWith), cn = C(\"\".slice), an = Math.min, sn = nn(\"startsWith\"), un = !(sn || (Dt = rn(String.prototype, \"startsWith\"), !Dt || Dt.writable));\nVt({\n    target: \"String\",\n    proto: !0,\n    forced: !un && !sn\n}, {\n    startsWith: function(e) {\n        var t = qt(W(this));\n        en(e);\n        var n = wt(an(arguments.length > 1 ? arguments[1] : void 0, t.length)), r = qt(e);\n        return on ? on(t, r, n) : cn(t, n, n + r.length) === r;\n    }\n});\nvar ln = function(e, t) {\n    return C(p[e].prototype[t]);\n};\nln(\"String\", \"startsWith\");\nvar fn = Array.isArray || function(e) {\n    return \"Array\" == P(e);\n}, dn = TypeError, hn = function(e) {\n    if (e > 9007199254740991) throw dn(\"Maximum allowed index exceeded\");\n    return e;\n}, pn = function(e, t, n) {\n    var r = Te(t);\n    r in e ? Ge.f(e, r, O(0, n)) : e[r] = n;\n}, yn = function() {}, vn = [], mn = V(\"Reflect\", \"construct\"), bn = /^\\s*(?:class|function)\\b/, gn = C(bn.exec), wn = !bn.exec(yn), Sn = function(e) {\n    if (!Z(e)) return !1;\n    try {\n        return mn(yn, vn, e), !0;\n    } catch (e) {\n        return !1;\n    }\n}, _n = function(e) {\n    if (!Z(e)) return !1;\n    switch(zt(e)){\n        case \"AsyncFunction\":\n        case \"GeneratorFunction\":\n        case \"AsyncGeneratorFunction\":\n            return !1;\n    }\n    try {\n        return wn || !!gn(bn, He(e));\n    } catch (e) {\n        return !0;\n    }\n};\n_n.sham = !0;\nvar kn, On = !mn || y(function() {\n    var e;\n    return Sn(Sn.call) || !Sn(Object) || !Sn(function() {\n        e = !0;\n    }) || e;\n}) ? _n : Sn, In = _e(\"species\"), Tn = Array, En = function(e, t) {\n    return new (function(e) {\n        var t;\n        return fn(e) && (t = e.constructor, (On(t) && (t === Tn || fn(t.prototype)) || G(t) && null === (t = t[In])) && (t = void 0)), void 0 === t ? Tn : t;\n    }(e))(0 === t ? 0 : t);\n}, xn = _e(\"species\"), Cn = _e(\"isConcatSpreadable\"), jn = z >= 51 || !y(function() {\n    var e = [];\n    return e[Cn] = !1, e.concat()[0] !== e;\n}), Rn = (kn = \"concat\", z >= 51 || !y(function() {\n    var e = [];\n    return (e.constructor = {})[xn] = function() {\n        return {\n            foo: 1\n        };\n    }, 1 !== e[kn](Boolean).foo;\n})), Pn = function(e) {\n    if (!G(e)) return !1;\n    var t = e[Cn];\n    return void 0 !== t ? !!t : fn(e);\n};\nVt({\n    target: \"Array\",\n    proto: !0,\n    arity: 1,\n    forced: !jn || !Rn\n}, {\n    concat: function(e) {\n        var t, n, r, o, i, c = fe(this), a = En(c, 0), s = 0;\n        for(t = -1, r = arguments.length; t < r; t++)if (Pn(i = -1 === t ? c : arguments[t])) for(o = St(i), hn(s + o), n = 0; n < o; n++, s++)n in i && pn(a, s, i[n]);\n        else hn(s + 1), pn(a, s++, i);\n        return a.length = s, a;\n    }\n});\nvar Un = Yt ? ({}).toString : function() {\n    return \"[object \" + zt(this) + \"]\";\n};\nYt || ft(Object.prototype, \"toString\", Un, {\n    unsafe: !0\n});\nvar An, Fn = Object.keys || function(e) {\n    return Tt(e, Et);\n}, Kn = v && !Ue ? Object.defineProperties : function(e, t) {\n    Ke(e);\n    for(var n, r = L(t), o = Fn(t), i = o.length, c = 0; i > c;)Ge.f(e, n = o[c++], r[n]);\n    return e;\n}, Wn = {\n    f: Kn\n}, Ln = V(\"document\", \"documentElement\"), Zn = et(\"IE_PROTO\"), Gn = function() {}, Xn = function(e) {\n    return \"<script>\" + e + \"</script>\";\n}, Vn = function(e) {\n    e.write(Xn(\"\")), e.close();\n    var t = e.parentWindow.Object;\n    return e = null, t;\n}, Nn = function() {\n    try {\n        An = new ActiveXObject(\"htmlfile\");\n    } catch (e) {}\n    var e, t;\n    Nn = \"undefined\" != typeof document ? document.domain && An ? Vn(An) : ((t = Ce(\"iframe\")).style.display = \"none\", Ln.appendChild(t), t.src = String(\"javascript:\"), (e = t.contentWindow.document).open(), e.write(Xn(\"document.F=Object\")), e.close(), e.F) : Vn(An);\n    for(var n = Et.length; n--;)delete Nn.prototype[Et[n]];\n    return Nn();\n};\ntt[Zn] = !0;\nvar Dn = Object.create || function(e, t) {\n    var n;\n    return null !== e ? (Gn.prototype = Ke(e), n = new Gn, Gn.prototype = null, n[Zn] = e) : n = Nn(), void 0 === t ? n : Wn.f(n, t);\n}, Yn = Array, Bn = Math.max, Mn = Ct.f, Jn =  false ? 0 : [], zn = function(e) {\n    try {\n        return Mn(e);\n    } catch (e) {\n        return function(e, t, n) {\n            for(var r = St(e), o = bt(t, r), i = bt(void 0 === n ? r : n, r), c = Yn(Bn(i - o, 0)), a = 0; o < i; o++, a++)pn(c, a, e[o]);\n            return c.length = a, c;\n        }(Jn);\n    }\n}, Hn = {\n    f: function(e) {\n        return Jn && \"Window\" == P(e) ? zn(e) : Mn(L(e));\n    }\n}, qn = {\n    f: _e\n}, Qn = p, $n = Ge.f, er = function(e) {\n    var t = Qn.Symbol || (Qn.Symbol = {});\n    he(t, e) || $n(t, e, {\n        value: qn.f(e)\n    });\n}, tr = function() {\n    var e = V(\"Symbol\"), t = e && e.prototype, n = t && t.valueOf, r = _e(\"toPrimitive\");\n    t && !t[r] && ft(t, r, function(e) {\n        return g(n, this);\n    }, {\n        arity: 1\n    });\n}, nr = Ge.f, rr = _e(\"toStringTag\"), or = function(e, t, n) {\n    e && !n && (e = e.prototype), e && !he(e, rr) && nr(e, rr, {\n        configurable: !0,\n        value: t\n    });\n}, ir = C(C.bind), cr = function(e, t) {\n    return re(e), void 0 === t ? e : m ? ir(e, t) : function() {\n        return e.apply(t, arguments);\n    };\n}, ar = C([].push), sr = function(e) {\n    var t = 1 == e, n = 2 == e, r = 3 == e, o = 4 == e, i = 6 == e, c = 7 == e, a = 5 == e || i;\n    return function(s, u, l, f) {\n        for(var d, h, p = fe(s), y = F(p), v = cr(u, l), m = St(y), b = 0, g = f || En, w = t ? g(s, m) : n || c ? g(s, 0) : void 0; m > b; b++)if ((a || b in y) && (h = v(d = y[b], b, p), e)) if (t) w[b] = h;\n        else if (h) switch(e){\n            case 3:\n                return !0;\n            case 5:\n                return d;\n            case 6:\n                return b;\n            case 2:\n                ar(w, d);\n        }\n        else switch(e){\n            case 4:\n                return !1;\n            case 7:\n                ar(w, d);\n        }\n        return i ? -1 : r || o ? o : w;\n    };\n}, ur = {\n    forEach: sr(0),\n    map: sr(1),\n    filter: sr(2),\n    some: sr(3),\n    every: sr(4),\n    find: sr(5),\n    findIndex: sr(6),\n    filterReject: sr(7)\n}.forEach, lr = et(\"hidden\"), fr = ut.set, dr = ut.getterFor(\"Symbol\"), hr = Object.prototype, pr = p.Symbol, yr = pr && pr.prototype, vr = p.TypeError, mr = p.QObject, br = Pe.f, gr = Ge.f, wr = Hn.f, Sr = k.f, _r = C([].push), kr = ue(\"symbols\"), Or = ue(\"op-symbols\"), Ir = ue(\"wks\"), Tr = !mr || !mr.prototype || !mr.prototype.findChild, Er = v && y(function() {\n    return 7 != Dn(gr({}, \"a\", {\n        get: function() {\n            return gr(this, \"a\", {\n                value: 7\n            }).a;\n        }\n    })).a;\n}) ? function(e, t, n) {\n    var r = br(hr, t);\n    r && delete hr[t], gr(e, t, n), r && e !== hr && gr(hr, t, r);\n} : gr, xr = function(e, t) {\n    var n = kr[e] = Dn(yr);\n    return fr(n, {\n        type: \"Symbol\",\n        tag: e,\n        description: t\n    }), v || (n.description = t), n;\n}, Cr = function(e, t, n) {\n    e === hr && Cr(Or, t, n), Ke(e);\n    var r = Te(t);\n    return Ke(n), he(kr, r) ? (n.enumerable ? (he(e, lr) && e[lr][r] && (e[lr][r] = !1), n = Dn(n, {\n        enumerable: O(0, !1)\n    })) : (he(e, lr) || gr(e, lr, O(1, {})), e[lr][r] = !0), Er(e, r, n)) : gr(e, r, n);\n}, jr = function(e, t) {\n    Ke(e);\n    var n = L(t), r = Fn(n).concat(Ar(n));\n    return ur(r, function(t) {\n        v && !g(Rr, n, t) || Cr(e, t, n[t]);\n    }), e;\n}, Rr = function(e) {\n    var t = Te(e), n = g(Sr, this, t);\n    return !(this === hr && he(kr, t) && !he(Or, t)) && (!(n || !he(this, t) || !he(kr, t) || he(this, lr) && this[lr][t]) || n);\n}, Pr = function(e, t) {\n    var n = L(e), r = Te(t);\n    if (n !== hr || !he(kr, r) || he(Or, r)) {\n        var o = br(n, r);\n        return !o || !he(kr, r) || he(n, lr) && n[lr][r] || (o.enumerable = !0), o;\n    }\n}, Ur = function(e) {\n    var t = wr(L(e)), n = [];\n    return ur(t, function(e) {\n        he(kr, e) || he(tt, e) || _r(n, e);\n    }), n;\n}, Ar = function(e) {\n    var t = e === hr, n = wr(t ? Or : L(e)), r = [];\n    return ur(n, function(e) {\n        !he(kr, e) || t && !he(hr, e) || _r(r, kr[e]);\n    }), r;\n};\nH || (yr = (pr = function() {\n    if (N(yr, this)) throw vr(\"Symbol is not a constructor\");\n    var e = arguments.length && void 0 !== arguments[0] ? qt(arguments[0]) : void 0, t = me(e), n = function(e) {\n        this === hr && g(n, Or, e), he(this, lr) && he(this[lr], t) && (this[lr][t] = !1), Er(this, t, O(1, e));\n    };\n    return v && Tr && Er(hr, t, {\n        configurable: !0,\n        set: n\n    }), xr(t, e);\n}).prototype, ft(yr, \"toString\", function() {\n    return dr(this).tag;\n}), ft(pr, \"withoutSetter\", function(e) {\n    return xr(me(e), e);\n}), k.f = Rr, Ge.f = Cr, Wn.f = jr, Pe.f = Pr, Ct.f = Hn.f = Ur, jt.f = Ar, qn.f = function(e) {\n    return xr(_e(e), e);\n}, v && (gr(yr, \"description\", {\n    configurable: !0,\n    get: function() {\n        return dr(this).description;\n    }\n}), ft(hr, \"propertyIsEnumerable\", Rr, {\n    unsafe: !0\n}))), Vt({\n    global: !0,\n    constructor: !0,\n    wrap: !0,\n    forced: !H,\n    sham: !H\n}, {\n    Symbol: pr\n}), ur(Fn(Ir), function(e) {\n    er(e);\n}), Vt({\n    target: \"Symbol\",\n    stat: !0,\n    forced: !H\n}, {\n    useSetter: function() {\n        Tr = !0;\n    },\n    useSimple: function() {\n        Tr = !1;\n    }\n}), Vt({\n    target: \"Object\",\n    stat: !0,\n    forced: !H,\n    sham: !v\n}, {\n    create: function(e, t) {\n        return void 0 === t ? Dn(e) : jr(Dn(e), t);\n    },\n    defineProperty: Cr,\n    defineProperties: jr,\n    getOwnPropertyDescriptor: Pr\n}), Vt({\n    target: \"Object\",\n    stat: !0,\n    forced: !H\n}, {\n    getOwnPropertyNames: Ur\n}), tr(), or(pr, \"Symbol\"), tt[lr] = !0;\nvar Fr = H && !!Symbol.for && !!Symbol.keyFor, Kr = ue(\"string-to-symbol-registry\"), Wr = ue(\"symbol-to-string-registry\");\nVt({\n    target: \"Symbol\",\n    stat: !0,\n    forced: !Fr\n}, {\n    for: function(e) {\n        var t = qt(e);\n        if (he(Kr, t)) return Kr[t];\n        var n = V(\"Symbol\")(t);\n        return Kr[t] = n, Wr[n] = t, n;\n    }\n});\nvar Lr = ue(\"symbol-to-string-registry\");\nVt({\n    target: \"Symbol\",\n    stat: !0,\n    forced: !Fr\n}, {\n    keyFor: function(e) {\n        if (!$(e)) throw TypeError(te(e) + \" is not a symbol\");\n        if (he(Lr, e)) return Lr[e];\n    }\n});\nvar Zr = Function.prototype, Gr = Zr.apply, Xr = Zr.call, Vr = \"object\" == typeof Reflect && Reflect.apply || (m ? Xr.bind(Gr) : function() {\n    return Xr.apply(Gr, arguments);\n}), Nr = C([].slice), Dr = V(\"JSON\", \"stringify\"), Yr = C(/./.exec), Br = C(\"\".charAt), Mr = C(\"\".charCodeAt), Jr = C(\"\".replace), zr = C(1..toString), Hr = /[\\uD800-\\uDFFF]/g, qr = /^[\\uD800-\\uDBFF]$/, Qr = /^[\\uDC00-\\uDFFF]$/, $r = !H || y(function() {\n    var e = V(\"Symbol\")();\n    return \"[null]\" != Dr([\n        e\n    ]) || \"{}\" != Dr({\n        a: e\n    }) || \"{}\" != Dr(Object(e));\n}), eo = y(function() {\n    return '\"\\udf06\\ud834\"' !== Dr(\"\\udf06\\ud834\") || '\"\\udead\"' !== Dr(\"\\udead\");\n}), to = function(e, t) {\n    var n = Nr(arguments), r = t;\n    if ((G(t) || void 0 !== e) && !$(e)) return fn(t) || (t = function(e, t) {\n        if (Z(r) && (t = g(r, this, e, t)), !$(t)) return t;\n    }), n[1] = t, Vr(Dr, null, n);\n}, no = function(e, t, n) {\n    var r = Br(n, t - 1), o = Br(n, t + 1);\n    return Yr(qr, e) && !Yr(Qr, o) || Yr(Qr, e) && !Yr(qr, r) ? \"\\\\u\" + zr(Mr(e, 0), 16) : e;\n};\nDr && Vt({\n    target: \"JSON\",\n    stat: !0,\n    arity: 3,\n    forced: $r || eo\n}, {\n    stringify: function(e, t, n) {\n        var r = Nr(arguments), o = Vr($r ? to : Dr, null, r);\n        return eo && \"string\" == typeof o ? Jr(o, Hr, no) : o;\n    }\n});\nvar ro = !H || y(function() {\n    jt.f(1);\n});\nVt({\n    target: \"Object\",\n    stat: !0,\n    forced: ro\n}, {\n    getOwnPropertySymbols: function(e) {\n        var t = jt.f;\n        return t ? t(fe(e)) : [];\n    }\n}), er(\"asyncIterator\");\nvar oo = Ge.f, io = p.Symbol, co = io && io.prototype;\nif (v && Z(io) && (!(\"description\" in co) || void 0 !== io().description)) {\n    var ao = {}, so = function() {\n        var e = arguments.length < 1 || void 0 === arguments[0] ? void 0 : qt(arguments[0]), t = N(co, this) ? new io(e) : void 0 === e ? io() : io(e);\n        return \"\" === e && (ao[t] = !0), t;\n    };\n    Ut(so, io), so.prototype = co, co.constructor = so;\n    var uo = \"Symbol(test)\" == String(io(\"test\")), lo = C(co.toString), fo = C(co.valueOf), ho = /^Symbol\\((.*)\\)[^)]+$/, po = C(\"\".replace), yo = C(\"\".slice);\n    oo(co, \"description\", {\n        configurable: !0,\n        get: function() {\n            var e = fo(this), t = lo(e);\n            if (he(ao, e)) return \"\";\n            var n = uo ? yo(t, 7, -1) : po(t, ho, \"$1\");\n            return \"\" === n ? void 0 : n;\n        }\n    }), Vt({\n        global: !0,\n        constructor: !0,\n        forced: !0\n    }, {\n        Symbol: so\n    });\n}\ner(\"hasInstance\"), er(\"isConcatSpreadable\"), er(\"iterator\"), er(\"match\"), er(\"matchAll\"), er(\"replace\"), er(\"search\"), er(\"species\"), er(\"split\"), er(\"toPrimitive\"), tr(), er(\"toStringTag\"), or(V(\"Symbol\"), \"Symbol\"), er(\"unscopables\"), or(p.JSON, \"JSON\", !0), or(Math, \"Math\", !0), Vt({\n    global: !0\n}, {\n    Reflect: {}\n}), or(p.Reflect, \"Reflect\", !0), Qn.Symbol;\nvar vo, mo, bo, go = C(\"\".charAt), wo = C(\"\".charCodeAt), So = C(\"\".slice), _o = function(e) {\n    return function(t, n) {\n        var r, o, i = qt(W(t)), c = yt(n), a = i.length;\n        return c < 0 || c >= a ? e ? \"\" : void 0 : (r = wo(i, c)) < 55296 || r > 56319 || c + 1 === a || (o = wo(i, c + 1)) < 56320 || o > 57343 ? e ? go(i, c) : r : e ? So(i, c, c + 2) : o - 56320 + (r - 55296 << 10) + 65536;\n    };\n}, ko = {\n    codeAt: _o(!1),\n    charAt: _o(!0)\n}, Oo = !y(function() {\n    function e() {}\n    return e.prototype.constructor = null, Object.getPrototypeOf(new e) !== e.prototype;\n}), Io = et(\"IE_PROTO\"), To = Object, Eo = To.prototype, xo = Oo ? To.getPrototypeOf : function(e) {\n    var t = fe(e);\n    if (he(t, Io)) return t[Io];\n    var n = t.constructor;\n    return Z(n) && t instanceof n ? n.prototype : t instanceof To ? Eo : null;\n}, Co = _e(\"iterator\"), jo = !1;\n[].keys && (\"next\" in (bo = [].keys()) ? (mo = xo(xo(bo))) !== Object.prototype && (vo = mo) : jo = !0);\nvar Ro = null == vo || y(function() {\n    var e = {};\n    return vo[Co].call(e) !== e;\n});\nRo && (vo = {}), Z(vo[Co]) || ft(vo, Co, function() {\n    return this;\n});\nvar Po = {\n    IteratorPrototype: vo,\n    BUGGY_SAFARI_ITERATORS: jo\n}, Uo = {}, Ao = Po.IteratorPrototype, Fo = function() {\n    return this;\n}, Ko = String, Wo = TypeError, Lo = Object.setPrototypeOf || (\"__proto__\" in {} ? function() {\n    var e, t = !1, n = {};\n    try {\n        (e = C(Object.getOwnPropertyDescriptor(Object.prototype, \"__proto__\").set))(n, []), t = n instanceof Array;\n    } catch (e) {}\n    return function(n, r) {\n        return Ke(n), function(e) {\n            if (\"object\" == typeof e || Z(e)) return e;\n            throw Wo(\"Can't set \" + Ko(e) + \" as a prototype\");\n        }(r), t ? e(n, r) : n.__proto__ = r, n;\n    };\n}() : void 0), Zo = Ye.PROPER, Go = Ye.CONFIGURABLE, Xo = Po.IteratorPrototype, Vo = Po.BUGGY_SAFARI_ITERATORS, No = _e(\"iterator\"), Do = function() {\n    return this;\n}, Yo = function(e, t, n, r, o, i, c) {\n    !function(e, t, n, r) {\n        var o = t + \" Iterator\";\n        e.prototype = Dn(Ao, {\n            next: O(+!r, n)\n        }), or(e, o, !1), Uo[o] = Fo;\n    }(n, t, r);\n    var a, s, u, l = function(e) {\n        if (e === o && y) return y;\n        if (!Vo && e in h) return h[e];\n        switch(e){\n            case \"keys\":\n            case \"values\":\n            case \"entries\":\n                return function() {\n                    return new n(this, e);\n                };\n        }\n        return function() {\n            return new n(this);\n        };\n    }, f = t + \" Iterator\", d = !1, h = e.prototype, p = h[No] || h[\"@@iterator\"] || o && h[o], y = !Vo && p || l(o), v = \"Array\" == t && h.entries || p;\n    if (v && (a = xo(v.call(new e))) !== Object.prototype && a.next && (xo(a) !== Xo && (Lo ? Lo(a, Xo) : Z(a[No]) || ft(a, No, Do)), or(a, f, !0)), Zo && \"values\" == o && p && \"values\" !== p.name && (Go ? Xe(h, \"name\", \"values\") : (d = !0, y = function() {\n        return g(p, this);\n    })), o) if (s = {\n        values: l(\"values\"),\n        keys: i ? y : l(\"keys\"),\n        entries: l(\"entries\")\n    }, c) for(u in s)(Vo || d || !(u in h)) && ft(h, u, s[u]);\n    else Vt({\n        target: t,\n        proto: !0,\n        forced: Vo || d\n    }, s);\n    return h[No] !== y && ft(h, No, y, {\n        name: o\n    }), Uo[t] = y, s;\n}, Bo = ko.charAt, Mo = ut.set, Jo = ut.getterFor(\"String Iterator\");\nYo(String, \"String\", function(e) {\n    Mo(this, {\n        type: \"String Iterator\",\n        string: qt(e),\n        index: 0\n    });\n}, function() {\n    var e, t = Jo(this), n = t.string, r = t.index;\n    return r >= n.length ? {\n        value: void 0,\n        done: !0\n    } : (e = Bo(n, r), t.index += e.length, {\n        value: e,\n        done: !1\n    });\n});\nvar zo = function(e, t, n) {\n    var r, o;\n    Ke(e);\n    try {\n        if (!(r = oe(e, \"return\"))) {\n            if (\"throw\" === t) throw n;\n            return n;\n        }\n        r = g(r, e);\n    } catch (e) {\n        o = !0, r = e;\n    }\n    if (\"throw\" === t) throw n;\n    if (o) throw r;\n    return Ke(r), n;\n}, Ho = function(e, t, n, r) {\n    try {\n        return r ? t(Ke(n)[0], n[1]) : t(n);\n    } catch (t) {\n        zo(e, \"throw\", t);\n    }\n}, qo = _e(\"iterator\"), Qo = Array.prototype, $o = function(e) {\n    return void 0 !== e && (Uo.Array === e || Qo[qo] === e);\n}, ei = _e(\"iterator\"), ti = function(e) {\n    if (null != e) return oe(e, ei) || oe(e, \"@@iterator\") || Uo[zt(e)];\n}, ni = TypeError, ri = function(e, t) {\n    var n = arguments.length < 2 ? ti(e) : t;\n    if (re(n)) return Ke(g(n, e));\n    throw ni(te(e) + \" is not iterable\");\n}, oi = Array, ii = _e(\"iterator\"), ci = !1;\ntry {\n    var ai = 0, si = {\n        next: function() {\n            return {\n                done: !!ai++\n            };\n        },\n        return: function() {\n            ci = !0;\n        }\n    };\n    si[ii] = function() {\n        return this;\n    }, Array.from(si, function() {\n        throw 2;\n    });\n} catch (e) {}\nvar ui = function(e, t) {\n    if (!t && !ci) return !1;\n    var n = !1;\n    try {\n        var r = {};\n        r[ii] = function() {\n            return {\n                next: function() {\n                    return {\n                        done: n = !0\n                    };\n                }\n            };\n        }, e(r);\n    } catch (e) {}\n    return n;\n}, li = !ui(function(e) {\n    Array.from(e);\n});\nVt({\n    target: \"Array\",\n    stat: !0,\n    forced: li\n}, {\n    from: function(e) {\n        var t = fe(e), n = On(this), r = arguments.length, o = r > 1 ? arguments[1] : void 0, i = void 0 !== o;\n        i && (o = cr(o, r > 2 ? arguments[2] : void 0));\n        var c, a, s, u, l, f, d = ti(t), h = 0;\n        if (!d || this === oi && $o(d)) for(c = St(t), a = n ? new this(c) : oi(c); c > h; h++)f = i ? o(t[h], h) : t[h], pn(a, h, f);\n        else for(l = (u = ri(t, d)).next, a = n ? new this : []; !(s = g(l, u)).done; h++)f = i ? Ho(u, o, [\n            s.value,\n            h\n        ], !0) : s.value, pn(a, h, f);\n        return a.length = h, a;\n    }\n}), Qn.Array.from;\nvar fi, di, hi, pi = \"undefined\" != typeof ArrayBuffer && \"undefined\" != typeof DataView, yi = Ge.f, vi = p.Int8Array, mi = vi && vi.prototype, bi = p.Uint8ClampedArray, gi = bi && bi.prototype, wi = vi && xo(vi), Si = mi && xo(mi), _i = Object.prototype, ki = p.TypeError, Oi = _e(\"toStringTag\"), Ii = me(\"TYPED_ARRAY_TAG\"), Ti = me(\"TYPED_ARRAY_CONSTRUCTOR\"), Ei = pi && !!Lo && \"Opera\" !== zt(p.opera), xi = !1, Ci = {\n    Int8Array: 1,\n    Uint8Array: 1,\n    Uint8ClampedArray: 1,\n    Int16Array: 2,\n    Uint16Array: 2,\n    Int32Array: 4,\n    Uint32Array: 4,\n    Float32Array: 4,\n    Float64Array: 8\n}, ji = {\n    BigInt64Array: 8,\n    BigUint64Array: 8\n}, Ri = function(e) {\n    if (!G(e)) return !1;\n    var t = zt(e);\n    return he(Ci, t) || he(ji, t);\n};\nfor(fi in Ci)(hi = (di = p[fi]) && di.prototype) ? Xe(hi, Ti, di) : Ei = !1;\nfor(fi in ji)(hi = (di = p[fi]) && di.prototype) && Xe(hi, Ti, di);\nif ((!Ei || !Z(wi) || wi === Function.prototype) && (wi = function() {\n    throw ki(\"Incorrect invocation\");\n}, Ei)) for(fi in Ci)p[fi] && Lo(p[fi], wi);\nif ((!Ei || !Si || Si === _i) && (Si = wi.prototype, Ei)) for(fi in Ci)p[fi] && Lo(p[fi].prototype, Si);\nif (Ei && xo(gi) !== Si && Lo(gi, Si), v && !he(Si, Oi)) for(fi in xi = !0, yi(Si, Oi, {\n    get: function() {\n        return G(this) ? this[Ii] : void 0;\n    }\n}), Ci)p[fi] && Xe(p[fi], Ii, fi);\nvar Pi = {\n    NATIVE_ARRAY_BUFFER_VIEWS: Ei,\n    TYPED_ARRAY_CONSTRUCTOR: Ti,\n    TYPED_ARRAY_TAG: xi && Ii,\n    aTypedArray: function(e) {\n        if (Ri(e)) return e;\n        throw ki(\"Target is not a typed array\");\n    },\n    aTypedArrayConstructor: function(e) {\n        if (Z(e) && (!Lo || N(wi, e))) return e;\n        throw ki(te(e) + \" is not a typed array constructor\");\n    },\n    exportTypedArrayMethod: function(e, t, n, r) {\n        if (v) {\n            if (n) for(var o in Ci){\n                var i = p[o];\n                if (i && he(i.prototype, e)) try {\n                    delete i.prototype[e];\n                } catch (n) {\n                    try {\n                        i.prototype[e] = t;\n                    } catch (e) {}\n                }\n            }\n            Si[e] && !n || ft(Si, e, n ? t : Ei && mi[e] || t, r);\n        }\n    },\n    exportTypedArrayStaticMethod: function(e, t, n) {\n        var r, o;\n        if (v) {\n            if (Lo) {\n                if (n) {\n                    for(r in Ci)if ((o = p[r]) && he(o, e)) try {\n                        delete o[e];\n                    } catch (e) {}\n                }\n                if (wi[e] && !n) return;\n                try {\n                    return ft(wi, e, n ? t : Ei && wi[e] || t);\n                } catch (e) {}\n            }\n            for(r in Ci)!(o = p[r]) || o[e] && !n || ft(o, e, t);\n        }\n    },\n    isView: function(e) {\n        if (!G(e)) return !1;\n        var t = zt(e);\n        return \"DataView\" === t || he(Ci, t) || he(ji, t);\n    },\n    isTypedArray: Ri,\n    TypedArray: wi,\n    TypedArrayPrototype: Si\n}, Ui = TypeError, Ai = _e(\"species\"), Fi = function(e, t) {\n    var n, r = Ke(e).constructor;\n    return void 0 === r || null == (n = Ke(r)[Ai]) ? t : function(e) {\n        if (On(e)) return e;\n        throw Ui(te(e) + \" is not a constructor\");\n    }(n);\n}, Ki = Pi.TYPED_ARRAY_CONSTRUCTOR, Wi = Pi.aTypedArrayConstructor, Li = Pi.aTypedArray;\n(0, Pi.exportTypedArrayMethod)(\"slice\", function(e, t) {\n    for(var n, r = Nr(Li(this), e, t), o = Wi(Fi(n = this, n[Ki])), i = 0, c = r.length, a = new o(c); c > i;)a[i] = r[i++];\n    return a;\n}, y(function() {\n    new Int8Array(1).slice();\n}));\nvar Zi = Ge.f, Gi = _e(\"unscopables\"), Xi = Array.prototype;\nnull == Xi[Gi] && Zi(Xi, Gi, {\n    configurable: !0,\n    value: Dn(null)\n});\nvar Vi = function(e) {\n    Xi[Gi][e] = !0;\n}, Ni = kt.includes, Di = y(function() {\n    return !Array(1).includes();\n});\nVt({\n    target: \"Array\",\n    proto: !0,\n    forced: Di\n}, {\n    includes: function(e) {\n        return Ni(this, e, arguments.length > 1 ? arguments[1] : void 0);\n    }\n}), Vi(\"includes\"), ln(\"Array\", \"includes\");\nvar Yi = C(\"\".indexOf);\nVt({\n    target: \"String\",\n    proto: !0,\n    forced: !nn(\"includes\")\n}, {\n    includes: function(e) {\n        return !!~Yi(qt(W(this)), qt(en(e)), arguments.length > 1 ? arguments[1] : void 0);\n    }\n}), ln(\"String\", \"includes\");\nvar Bi = Ge.f, Mi = ut.set, Ji = ut.getterFor(\"Array Iterator\");\nYo(Array, \"Array\", function(e, t) {\n    Mi(this, {\n        type: \"Array Iterator\",\n        target: L(e),\n        index: 0,\n        kind: t\n    });\n}, function() {\n    var e = Ji(this), t = e.target, n = e.kind, r = e.index++;\n    return !t || r >= t.length ? (e.target = void 0, {\n        value: void 0,\n        done: !0\n    }) : \"keys\" == n ? {\n        value: r,\n        done: !1\n    } : \"values\" == n ? {\n        value: t[r],\n        done: !1\n    } : {\n        value: [\n            r,\n            t[r]\n        ],\n        done: !1\n    };\n}, \"values\");\nvar zi = Uo.Arguments = Uo.Array;\nif (Vi(\"keys\"), Vi(\"values\"), Vi(\"entries\"), v && \"values\" !== zi.name) try {\n    Bi(zi, \"name\", {\n        value: \"values\"\n    });\n} catch (e) {}\nvar Hi = y(function() {\n    if (\"function\" == typeof ArrayBuffer) {\n        var e = new ArrayBuffer(8);\n        Object.isExtensible(e) && Object.defineProperty(e, \"a\", {\n            value: 8\n        });\n    }\n}), qi = Object.isExtensible, Qi = y(function() {\n    qi(1);\n}) || Hi ? function(e) {\n    return !!G(e) && (!Hi || \"ArrayBuffer\" != P(e)) && (!qi || qi(e));\n} : qi, $i = !y(function() {\n    return Object.isExtensible(Object.preventExtensions({}));\n}), ec = l(function(e) {\n    var t = Ge.f, n = !1, r = me(\"meta\"), o = 0, i = function(e) {\n        t(e, r, {\n            value: {\n                objectID: \"O\" + o++,\n                weakData: {}\n            }\n        });\n    }, c = e.exports = {\n        enable: function() {\n            c.enable = function() {}, n = !0;\n            var e = Ct.f, t = C([].splice), o = {};\n            o[r] = 1, e(o).length && (Ct.f = function(n) {\n                for(var o = e(n), i = 0, c = o.length; i < c; i++)if (o[i] === r) {\n                    t(o, i, 1);\n                    break;\n                }\n                return o;\n            }, Vt({\n                target: \"Object\",\n                stat: !0,\n                forced: !0\n            }, {\n                getOwnPropertyNames: Hn.f\n            }));\n        },\n        fastKey: function(e, t) {\n            if (!G(e)) return \"symbol\" == typeof e ? e : (\"string\" == typeof e ? \"S\" : \"P\") + e;\n            if (!he(e, r)) {\n                if (!Qi(e)) return \"F\";\n                if (!t) return \"E\";\n                i(e);\n            }\n            return e[r].objectID;\n        },\n        getWeakData: function(e, t) {\n            if (!he(e, r)) {\n                if (!Qi(e)) return !0;\n                if (!t) return !1;\n                i(e);\n            }\n            return e[r].weakData;\n        },\n        onFreeze: function(e) {\n            return $i && n && Qi(e) && !he(e, r) && i(e), e;\n        }\n    };\n    tt[r] = !0;\n});\nec.enable, ec.fastKey, ec.getWeakData, ec.onFreeze;\nvar tc = TypeError, nc = function(e, t) {\n    this.stopped = e, this.result = t;\n}, rc = nc.prototype, oc = function(e, t, n) {\n    var r, o, i, c, a, s, u, l = n && n.that, f = !(!n || !n.AS_ENTRIES), d = !(!n || !n.IS_ITERATOR), h = !(!n || !n.INTERRUPTED), p = cr(t, l), y = function(e) {\n        return r && zo(r, \"normal\", e), new nc(!0, e);\n    }, v = function(e) {\n        return f ? (Ke(e), h ? p(e[0], e[1], y) : p(e[0], e[1])) : h ? p(e, y) : p(e);\n    };\n    if (d) r = e;\n    else {\n        if (!(o = ti(e))) throw tc(te(e) + \" is not iterable\");\n        if ($o(o)) {\n            for(i = 0, c = St(e); c > i; i++)if ((a = v(e[i])) && N(rc, a)) return a;\n            return new nc(!1);\n        }\n        r = ri(e, o);\n    }\n    for(s = r.next; !(u = g(s, r)).done;){\n        try {\n            a = v(u.value);\n        } catch (e) {\n            zo(r, \"throw\", e);\n        }\n        if (\"object\" == typeof a && a && N(rc, a)) return a;\n    }\n    return new nc(!1);\n}, ic = TypeError, cc = function(e, t) {\n    if (N(t, e)) return e;\n    throw ic(\"Incorrect invocation\");\n}, ac = function(e, t, n) {\n    for(var r in t)ft(e, r, t[r], n);\n    return e;\n}, sc = _e(\"species\"), uc = Ge.f, lc = ec.fastKey, fc = ut.set, dc = ut.getterFor, hc = {\n    getConstructor: function(e, t, n, r) {\n        var o = e(function(e, o) {\n            cc(e, i), fc(e, {\n                type: t,\n                index: Dn(null),\n                first: void 0,\n                last: void 0,\n                size: 0\n            }), v || (e.size = 0), null != o && oc(o, e[r], {\n                that: e,\n                AS_ENTRIES: n\n            });\n        }), i = o.prototype, c = dc(t), a = function(e, t, n) {\n            var r, o, i = c(e), a = s(e, t);\n            return a ? a.value = n : (i.last = a = {\n                index: o = lc(t, !0),\n                key: t,\n                value: n,\n                previous: r = i.last,\n                next: void 0,\n                removed: !1\n            }, i.first || (i.first = a), r && (r.next = a), v ? i.size++ : e.size++, \"F\" !== o && (i.index[o] = a)), e;\n        }, s = function(e, t) {\n            var n, r = c(e), o = lc(t);\n            if (\"F\" !== o) return r.index[o];\n            for(n = r.first; n; n = n.next)if (n.key == t) return n;\n        };\n        return ac(i, {\n            clear: function() {\n                for(var e = c(this), t = e.index, n = e.first; n;)n.removed = !0, n.previous && (n.previous = n.previous.next = void 0), delete t[n.index], n = n.next;\n                e.first = e.last = void 0, v ? e.size = 0 : this.size = 0;\n            },\n            delete: function(e) {\n                var t = this, n = c(t), r = s(t, e);\n                if (r) {\n                    var o = r.next, i = r.previous;\n                    delete n.index[r.index], r.removed = !0, i && (i.next = o), o && (o.previous = i), n.first == r && (n.first = o), n.last == r && (n.last = i), v ? n.size-- : t.size--;\n                }\n                return !!r;\n            },\n            forEach: function(e) {\n                for(var t, n = c(this), r = cr(e, arguments.length > 1 ? arguments[1] : void 0); t = t ? t.next : n.first;)for(r(t.value, t.key, this); t && t.removed;)t = t.previous;\n            },\n            has: function(e) {\n                return !!s(this, e);\n            }\n        }), ac(i, n ? {\n            get: function(e) {\n                var t = s(this, e);\n                return t && t.value;\n            },\n            set: function(e, t) {\n                return a(this, 0 === e ? 0 : e, t);\n            }\n        } : {\n            add: function(e) {\n                return a(this, e = 0 === e ? 0 : e, e);\n            }\n        }), v && uc(i, \"size\", {\n            get: function() {\n                return c(this).size;\n            }\n        }), o;\n    },\n    setStrong: function(e, t, n) {\n        var r = t + \" Iterator\", o = dc(t), i = dc(r);\n        Yo(e, t, function(e, t) {\n            fc(this, {\n                type: r,\n                target: e,\n                state: o(e),\n                kind: t,\n                last: void 0\n            });\n        }, function() {\n            for(var e = i(this), t = e.kind, n = e.last; n && n.removed;)n = n.previous;\n            return e.target && (e.last = n = n ? n.next : e.state.first) ? \"keys\" == t ? {\n                value: n.key,\n                done: !1\n            } : \"values\" == t ? {\n                value: n.value,\n                done: !1\n            } : {\n                value: [\n                    n.key,\n                    n.value\n                ],\n                done: !1\n            } : (e.target = void 0, {\n                value: void 0,\n                done: !0\n            });\n        }, n ? \"entries\" : \"values\", !n, !0), function(e) {\n            var t = V(e), n = Ge.f;\n            v && t && !t[sc] && n(t, sc, {\n                configurable: !0,\n                get: function() {\n                    return this;\n                }\n            });\n        }(t);\n    }\n};\nfunction pc(e) {\n    var t = this.constructor;\n    return this.then(function(n) {\n        return t.resolve(e()).then(function() {\n            return n;\n        });\n    }, function(n) {\n        return t.resolve(e()).then(function() {\n            return t.reject(n);\n        });\n    });\n}\nfunction yc(e) {\n    return new this(function(t, n) {\n        if (!e || void 0 === e.length) return n(new TypeError(typeof e + \" \" + e + \" is not iterable(cannot read property Symbol(Symbol.iterator))\"));\n        var r = Array.prototype.slice.call(e);\n        if (0 === r.length) return t([]);\n        var o = r.length;\n        function i(e, n) {\n            if (n && (\"object\" == typeof n || \"function\" == typeof n)) {\n                var c = n.then;\n                if (\"function\" == typeof c) return void c.call(n, function(t) {\n                    i(e, t);\n                }, function(n) {\n                    r[e] = {\n                        status: \"rejected\",\n                        reason: n\n                    }, 0 == --o && t(r);\n                });\n            }\n            r[e] = {\n                status: \"fulfilled\",\n                value: n\n            }, 0 == --o && t(r);\n        }\n        for(var c = 0; c < r.length; c++)i(c, r[c]);\n    });\n}\n!function(e, t, n) {\n    var r = -1 !== e.indexOf(\"Map\"), o = -1 !== e.indexOf(\"Weak\"), i = r ? \"set\" : \"add\", c = p[e], a = c && c.prototype, s = c, u = {}, l = function(e) {\n        var t = C(a[e]);\n        ft(a, e, \"add\" == e ? function(e) {\n            return t(this, 0 === e ? 0 : e), this;\n        } : \"delete\" == e ? function(e) {\n            return !(o && !G(e)) && t(this, 0 === e ? 0 : e);\n        } : \"get\" == e ? function(e) {\n            return o && !G(e) ? void 0 : t(this, 0 === e ? 0 : e);\n        } : \"has\" == e ? function(e) {\n            return !(o && !G(e)) && t(this, 0 === e ? 0 : e);\n        } : function(e, n) {\n            return t(this, 0 === e ? 0 : e, n), this;\n        });\n    };\n    if (Gt(e, !Z(c) || !(o || a.forEach && !y(function() {\n        (new c).entries().next();\n    })))) s = n.getConstructor(t, e, r, i), ec.enable();\n    else if (Gt(e, !0)) {\n        var f = new s, d = f[i](o ? {} : -0, 1) != f, h = y(function() {\n            f.has(1);\n        }), v = ui(function(e) {\n            new c(e);\n        }), m = !o && y(function() {\n            for(var e = new c, t = 5; t--;)e[i](t, t);\n            return !e.has(-0);\n        });\n        v || ((s = t(function(e, t) {\n            cc(e, a);\n            var n = function(e, t, n) {\n                var r, o;\n                return Lo && Z(r = t.constructor) && r !== n && G(o = r.prototype) && o !== n.prototype && Lo(e, o), e;\n            }(new c, e, s);\n            return null != t && oc(t, n[i], {\n                that: n,\n                AS_ENTRIES: r\n            }), n;\n        })).prototype = a, a.constructor = s), (h || m) && (l(\"delete\"), l(\"has\"), r && l(\"get\")), (m || d) && l(i), o && a.clear && delete a.clear;\n    }\n    u[e] = s, Vt({\n        global: !0,\n        constructor: !0,\n        forced: s != c\n    }, u), or(s, e), o || n.setStrong(s, e, r);\n}(\"Set\", function(e) {\n    return function() {\n        return e(this, arguments.length ? arguments[0] : void 0);\n    };\n}, hc), Qn.Set;\nvar vc = setTimeout;\nfunction mc(e) {\n    return Boolean(e && void 0 !== e.length);\n}\nfunction bc() {}\nfunction gc(e) {\n    if (!(this instanceof gc)) throw new TypeError(\"Promises must be constructed via new\");\n    if (\"function\" != typeof e) throw new TypeError(\"not a function\");\n    this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], Ic(e, this);\n}\nfunction wc(e, t) {\n    for(; 3 === e._state;)e = e._value;\n    0 !== e._state ? (e._handled = !0, gc._immediateFn(function() {\n        var n = 1 === e._state ? t.onFulfilled : t.onRejected;\n        if (null !== n) {\n            var r;\n            try {\n                r = n(e._value);\n            } catch (e) {\n                return void _c(t.promise, e);\n            }\n            Sc(t.promise, r);\n        } else (1 === e._state ? Sc : _c)(t.promise, e._value);\n    })) : e._deferreds.push(t);\n}\nfunction Sc(e, t) {\n    try {\n        if (t === e) throw new TypeError(\"A promise cannot be resolved with itself.\");\n        if (t && (\"object\" == typeof t || \"function\" == typeof t)) {\n            var n = t.then;\n            if (t instanceof gc) return e._state = 3, e._value = t, void kc(e);\n            if (\"function\" == typeof n) return void Ic((r = n, o = t, function() {\n                r.apply(o, arguments);\n            }), e);\n        }\n        e._state = 1, e._value = t, kc(e);\n    } catch (t) {\n        _c(e, t);\n    }\n    var r, o;\n}\nfunction _c(e, t) {\n    e._state = 2, e._value = t, kc(e);\n}\nfunction kc(e) {\n    2 === e._state && 0 === e._deferreds.length && gc._immediateFn(function() {\n        e._handled || gc._unhandledRejectionFn(e._value);\n    });\n    for(var t = 0, n = e._deferreds.length; t < n; t++)wc(e, e._deferreds[t]);\n    e._deferreds = null;\n}\nfunction Oc(e, t, n) {\n    this.onFulfilled = \"function\" == typeof e ? e : null, this.onRejected = \"function\" == typeof t ? t : null, this.promise = n;\n}\nfunction Ic(e, t) {\n    var n = !1;\n    try {\n        e(function(e) {\n            n || (n = !0, Sc(t, e));\n        }, function(e) {\n            n || (n = !0, _c(t, e));\n        });\n    } catch (e) {\n        if (n) return;\n        n = !0, _c(t, e);\n    }\n}\ngc.prototype.catch = function(e) {\n    return this.then(null, e);\n}, gc.prototype.then = function(e, t) {\n    var n = new this.constructor(bc);\n    return wc(this, new Oc(e, t, n)), n;\n}, gc.prototype.finally = pc, gc.all = function(e) {\n    return new gc(function(t, n) {\n        if (!mc(e)) return n(new TypeError(\"Promise.all accepts an array\"));\n        var r = Array.prototype.slice.call(e);\n        if (0 === r.length) return t([]);\n        var o = r.length;\n        function i(e, c) {\n            try {\n                if (c && (\"object\" == typeof c || \"function\" == typeof c)) {\n                    var a = c.then;\n                    if (\"function\" == typeof a) return void a.call(c, function(t) {\n                        i(e, t);\n                    }, n);\n                }\n                r[e] = c, 0 == --o && t(r);\n            } catch (e) {\n                n(e);\n            }\n        }\n        for(var c = 0; c < r.length; c++)i(c, r[c]);\n    });\n}, gc.allSettled = yc, gc.resolve = function(e) {\n    return e && \"object\" == typeof e && e.constructor === gc ? e : new gc(function(t) {\n        t(e);\n    });\n}, gc.reject = function(e) {\n    return new gc(function(t, n) {\n        n(e);\n    });\n}, gc.race = function(e) {\n    return new gc(function(t, n) {\n        if (!mc(e)) return n(new TypeError(\"Promise.race accepts an array\"));\n        for(var r = 0, o = e.length; r < o; r++)gc.resolve(e[r]).then(t, n);\n    });\n}, gc._immediateFn = \"function\" == typeof setImmediate && function(e) {\n    setImmediate(e);\n} || function(e) {\n    vc(e, 0);\n}, gc._unhandledRejectionFn = function(e) {\n    \"undefined\" != typeof console && console && console.warn(\"Possible Unhandled Promise Rejection:\", e);\n};\nvar Tc = function() {\n    if (\"undefined\" != typeof self) return self;\n    if (false) {}\n    if (\"undefined\" != typeof global) return global;\n    throw new Error(\"unable to locate global object\");\n}();\n\"function\" != typeof Tc.Promise ? Tc.Promise = gc : (Tc.Promise.prototype.finally || (Tc.Promise.prototype.finally = pc), Tc.Promise.allSettled || (Tc.Promise.allSettled = yc)), function(e) {\n    function t() {}\n    function n(e, t) {\n        if (e = void 0 === e ? \"utf-8\" : e, t = void 0 === t ? {\n            fatal: !1\n        } : t, -1 === o.indexOf(e.toLowerCase())) throw new RangeError(\"Failed to construct 'TextDecoder': The encoding label provided ('\" + e + \"') is invalid.\");\n        if (t.fatal) throw Error(\"Failed to construct 'TextDecoder': the 'fatal' option is unsupported.\");\n    }\n    function r(e) {\n        for(var t = 0, n = Math.min(65536, e.length + 1), r = new Uint16Array(n), o = [], i = 0;;){\n            var c = t < e.length;\n            if (!c || i >= n - 1) {\n                if (o.push(String.fromCharCode.apply(null, r.subarray(0, i))), !c) return o.join(\"\");\n                e = e.subarray(t), i = t = 0;\n            }\n            if (0 == (128 & (c = e[t++]))) r[i++] = c;\n            else if (192 == (224 & c)) {\n                var a = 63 & e[t++];\n                r[i++] = (31 & c) << 6 | a;\n            } else if (224 == (240 & c)) {\n                a = 63 & e[t++];\n                var s = 63 & e[t++];\n                r[i++] = (31 & c) << 12 | a << 6 | s;\n            } else if (240 == (248 & c)) {\n                65535 < (c = (7 & c) << 18 | (a = 63 & e[t++]) << 12 | (s = 63 & e[t++]) << 6 | 63 & e[t++]) && (c -= 65536, r[i++] = c >>> 10 & 1023 | 55296, c = 56320 | 1023 & c), r[i++] = c;\n            }\n        }\n    }\n    if (e.TextEncoder && e.TextDecoder) return !1;\n    var o = [\n        \"utf-8\",\n        \"utf8\",\n        \"unicode-1-1-utf-8\"\n    ];\n    Object.defineProperty(t.prototype, \"encoding\", {\n        value: \"utf-8\"\n    }), t.prototype.encode = function(e, t) {\n        if ((t = void 0 === t ? {\n            stream: !1\n        } : t).stream) throw Error(\"Failed to encode: the 'stream' option is unsupported.\");\n        t = 0;\n        for(var n = e.length, r = 0, o = Math.max(32, n + (n >>> 1) + 7), i = new Uint8Array(o >>> 3 << 3); t < n;){\n            var c = e.charCodeAt(t++);\n            if (55296 <= c && 56319 >= c) {\n                if (t < n) {\n                    var a = e.charCodeAt(t);\n                    56320 == (64512 & a) && (++t, c = ((1023 & c) << 10) + (1023 & a) + 65536);\n                }\n                if (55296 <= c && 56319 >= c) continue;\n            }\n            if (r + 4 > i.length && (o += 8, o = (o *= 1 + t / e.length * 2) >>> 3 << 3, (a = new Uint8Array(o)).set(i), i = a), 0 == (4294967168 & c)) i[r++] = c;\n            else {\n                if (0 == (4294965248 & c)) i[r++] = c >>> 6 & 31 | 192;\n                else if (0 == (4294901760 & c)) i[r++] = c >>> 12 & 15 | 224, i[r++] = c >>> 6 & 63 | 128;\n                else {\n                    if (0 != (4292870144 & c)) continue;\n                    i[r++] = c >>> 18 & 7 | 240, i[r++] = c >>> 12 & 63 | 128, i[r++] = c >>> 6 & 63 | 128;\n                }\n                i[r++] = 63 & c | 128;\n            }\n        }\n        return i.slice ? i.slice(0, r) : i.subarray(0, r);\n    }, Object.defineProperty(n.prototype, \"encoding\", {\n        value: \"utf-8\"\n    }), Object.defineProperty(n.prototype, \"fatal\", {\n        value: !1\n    }), Object.defineProperty(n.prototype, \"ignoreBOM\", {\n        value: !1\n    });\n    var i = r;\n    \"function\" == typeof Buffer && Buffer.from ? i = function(e) {\n        return Buffer.from(e.buffer, e.byteOffset, e.byteLength).toString(\"utf-8\");\n    } : \"function\" == typeof Blob && \"function\" == typeof URL && \"function\" == typeof URL.createObjectURL && (i = function(e) {\n        var t = URL.createObjectURL(new Blob([\n            e\n        ], {\n            type: \"text/plain;charset=UTF-8\"\n        }));\n        try {\n            var n = new XMLHttpRequest;\n            return n.open(\"GET\", t, !1), n.send(), n.responseText;\n        } catch (t) {\n            return r(e);\n        } finally{\n            URL.revokeObjectURL(t);\n        }\n    }), n.prototype.decode = function(e, t) {\n        if ((t = void 0 === t ? {\n            stream: !1\n        } : t).stream) throw Error(\"Failed to decode: the 'stream' option is unsupported.\");\n        return e = e instanceof Uint8Array ? e : e.buffer instanceof ArrayBuffer ? new Uint8Array(e.buffer) : new Uint8Array(e), i(e);\n    }, e.TextEncoder = t, e.TextDecoder = n;\n}( false ? 0 : s), function() {\n    function e(e, t) {\n        if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n    }\n    function t(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function n(e, n, r) {\n        return n && t(e.prototype, n), r && t(e, r), e;\n    }\n    function r(e, t) {\n        if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n        e.prototype = Object.create(t && t.prototype, {\n            constructor: {\n                value: e,\n                writable: !0,\n                configurable: !0\n            }\n        }), t && i(e, t);\n    }\n    function o(e) {\n        return o = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {\n            return e.__proto__ || Object.getPrototypeOf(e);\n        }, o(e);\n    }\n    function i(e, t) {\n        return i = Object.setPrototypeOf || function(e, t) {\n            return e.__proto__ = t, e;\n        }, i(e, t);\n    }\n    function c() {\n        if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n        if (Reflect.construct.sham) return !1;\n        if (\"function\" == typeof Proxy) return !0;\n        try {\n            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0;\n        } catch (e) {\n            return !1;\n        }\n    }\n    function a(e) {\n        if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return e;\n    }\n    function u(e, t) {\n        return !t || \"object\" != typeof t && \"function\" != typeof t ? a(e) : t;\n    }\n    function l(e) {\n        var t = c();\n        return function() {\n            var n, r = o(e);\n            if (t) {\n                var i = o(this).constructor;\n                n = Reflect.construct(r, arguments, i);\n            } else n = r.apply(this, arguments);\n            return u(this, n);\n        };\n    }\n    function f(e, t) {\n        for(; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = o(e)););\n        return e;\n    }\n    function d(e, t, n) {\n        return d = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get : function(e, t, n) {\n            var r = f(e, t);\n            if (r) {\n                var o = Object.getOwnPropertyDescriptor(r, t);\n                return o.get ? o.get.call(n) : o.value;\n            }\n        }, d(e, t, n || e);\n    }\n    var h = function() {\n        function t() {\n            e(this, t), Object.defineProperty(this, \"listeners\", {\n                value: {},\n                writable: !0,\n                configurable: !0\n            });\n        }\n        return n(t, [\n            {\n                key: \"addEventListener\",\n                value: function(e, t, n) {\n                    e in this.listeners || (this.listeners[e] = []), this.listeners[e].push({\n                        callback: t,\n                        options: n\n                    });\n                }\n            },\n            {\n                key: \"removeEventListener\",\n                value: function(e, t) {\n                    if (e in this.listeners) {\n                        for(var n = this.listeners[e], r = 0, o = n.length; r < o; r++)if (n[r].callback === t) return void n.splice(r, 1);\n                    }\n                }\n            },\n            {\n                key: \"dispatchEvent\",\n                value: function(e) {\n                    if (e.type in this.listeners) {\n                        for(var t = this.listeners[e.type].slice(), n = 0, r = t.length; n < r; n++){\n                            var o = t[n];\n                            try {\n                                o.callback.call(this, e);\n                            } catch (e) {\n                                Promise.resolve().then(function() {\n                                    throw e;\n                                });\n                            }\n                            o.options && o.options.once && this.removeEventListener(e.type, o.callback);\n                        }\n                        return !e.defaultPrevented;\n                    }\n                }\n            }\n        ]), t;\n    }(), p = function(t) {\n        r(c, t);\n        var i = l(c);\n        function c() {\n            var t;\n            return e(this, c), (t = i.call(this)).listeners || h.call(a(t)), Object.defineProperty(a(t), \"aborted\", {\n                value: !1,\n                writable: !0,\n                configurable: !0\n            }), Object.defineProperty(a(t), \"onabort\", {\n                value: null,\n                writable: !0,\n                configurable: !0\n            }), t;\n        }\n        return n(c, [\n            {\n                key: \"toString\",\n                value: function() {\n                    return \"[object AbortSignal]\";\n                }\n            },\n            {\n                key: \"dispatchEvent\",\n                value: function(e) {\n                    \"abort\" === e.type && (this.aborted = !0, \"function\" == typeof this.onabort && this.onabort.call(this, e)), d(o(c.prototype), \"dispatchEvent\", this).call(this, e);\n                }\n            }\n        ]), c;\n    }(h), y = function() {\n        function t() {\n            e(this, t), Object.defineProperty(this, \"signal\", {\n                value: new p,\n                writable: !0,\n                configurable: !0\n            });\n        }\n        return n(t, [\n            {\n                key: \"abort\",\n                value: function() {\n                    var e;\n                    try {\n                        e = new Event(\"abort\");\n                    } catch (t) {\n                        \"undefined\" != typeof document ? document.createEvent ? (e = document.createEvent(\"Event\")).initEvent(\"abort\", !1, !1) : (e = document.createEventObject()).type = \"abort\" : e = {\n                            type: \"abort\",\n                            bubbles: !1,\n                            cancelable: !1\n                        };\n                    }\n                    this.signal.dispatchEvent(e);\n                }\n            },\n            {\n                key: \"toString\",\n                value: function() {\n                    return \"[object AbortController]\";\n                }\n            }\n        ]), t;\n    }();\n    function v(e) {\n        return e.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL ? (console.log(\"__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill\"), !0) : \"function\" == typeof e.Request && !e.Request.prototype.hasOwnProperty(\"signal\") || !e.AbortController;\n    }\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && (y.prototype[Symbol.toStringTag] = \"AbortController\", p.prototype[Symbol.toStringTag] = \"AbortSignal\"), function(e) {\n        v(e) && (e.AbortController = y, e.AbortSignal = p);\n    }(\"undefined\" != typeof self ? self : s);\n}();\nvar Ec = l(function(e, t) {\n    Object.defineProperty(t, \"__esModule\", {\n        value: !0\n    });\n    var n = function() {\n        function e() {\n            var e = this;\n            this.locked = new Map, this.addToLocked = function(t, n) {\n                var r = e.locked.get(t);\n                void 0 === r ? void 0 === n ? e.locked.set(t, []) : e.locked.set(t, [\n                    n\n                ]) : void 0 !== n && (r.unshift(n), e.locked.set(t, r));\n            }, this.isLocked = function(t) {\n                return e.locked.has(t);\n            }, this.lock = function(t) {\n                return new Promise(function(n, r) {\n                    e.isLocked(t) ? e.addToLocked(t, n) : (e.addToLocked(t), n());\n                });\n            }, this.unlock = function(t) {\n                var n = e.locked.get(t);\n                if (void 0 !== n && 0 !== n.length) {\n                    var r = n.pop();\n                    e.locked.set(t, n), void 0 !== r && setTimeout(r, 0);\n                } else e.locked.delete(t);\n            };\n        }\n        return e.getInstance = function() {\n            return void 0 === e.instance && (e.instance = new e), e.instance;\n        }, e;\n    }();\n    t.default = function() {\n        return n.getInstance();\n    };\n});\nu(Ec);\nvar xc = l(function(e, t) {\n    var n = s && s.__awaiter || function(e, t, n, r) {\n        return new (n || (n = Promise))(function(o, i) {\n            function c(e) {\n                try {\n                    s(r.next(e));\n                } catch (e) {\n                    i(e);\n                }\n            }\n            function a(e) {\n                try {\n                    s(r.throw(e));\n                } catch (e) {\n                    i(e);\n                }\n            }\n            function s(e) {\n                e.done ? o(e.value) : new n(function(t) {\n                    t(e.value);\n                }).then(c, a);\n            }\n            s((r = r.apply(e, t || [])).next());\n        });\n    }, r = s && s.__generator || function(e, t) {\n        var n, r, o, i, c = {\n            label: 0,\n            sent: function() {\n                if (1 & o[0]) throw o[1];\n                return o[1];\n            },\n            trys: [],\n            ops: []\n        };\n        return i = {\n            next: a(0),\n            throw: a(1),\n            return: a(2)\n        }, \"function\" == typeof Symbol && (i[Symbol.iterator] = function() {\n            return this;\n        }), i;\n        function a(i) {\n            return function(a) {\n                return function(i) {\n                    if (n) throw new TypeError(\"Generator is already executing.\");\n                    for(; c;)try {\n                        if (n = 1, r && (o = 2 & i[0] ? r.return : i[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, i[1])).done) return o;\n                        switch(r = 0, o && (i = [\n                            2 & i[0],\n                            o.value\n                        ]), i[0]){\n                            case 0:\n                            case 1:\n                                o = i;\n                                break;\n                            case 4:\n                                return c.label++, {\n                                    value: i[1],\n                                    done: !1\n                                };\n                            case 5:\n                                c.label++, r = i[1], i = [\n                                    0\n                                ];\n                                continue;\n                            case 7:\n                                i = c.ops.pop(), c.trys.pop();\n                                continue;\n                            default:\n                                if (!(o = c.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {\n                                    c = 0;\n                                    continue;\n                                }\n                                if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {\n                                    c.label = i[1];\n                                    break;\n                                }\n                                if (6 === i[0] && c.label < o[1]) {\n                                    c.label = o[1], o = i;\n                                    break;\n                                }\n                                if (o && c.label < o[2]) {\n                                    c.label = o[2], c.ops.push(i);\n                                    break;\n                                }\n                                o[2] && c.ops.pop(), c.trys.pop();\n                                continue;\n                        }\n                        i = t.call(e, c);\n                    } catch (e) {\n                        i = [\n                            6,\n                            e\n                        ], r = 0;\n                    } finally{\n                        n = o = 0;\n                    }\n                    if (5 & i[0]) throw i[1];\n                    return {\n                        value: i[0] ? i[1] : void 0,\n                        done: !0\n                    };\n                }([\n                    i,\n                    a\n                ]);\n            };\n        }\n    };\n    Object.defineProperty(t, \"__esModule\", {\n        value: !0\n    });\n    var o = \"browser-tabs-lock-key\";\n    function i(e) {\n        return new Promise(function(t) {\n            return setTimeout(t, e);\n        });\n    }\n    function c(e) {\n        for(var t = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\", n = \"\", r = 0; r < e; r++){\n            n += t[Math.floor(Math.random() * t.length)];\n        }\n        return n;\n    }\n    var a = function() {\n        function e() {\n            this.acquiredIatSet = new Set, this.id = Date.now().toString() + c(15), this.acquireLock = this.acquireLock.bind(this), this.releaseLock = this.releaseLock.bind(this), this.releaseLock__private__ = this.releaseLock__private__.bind(this), this.waitForSomethingToChange = this.waitForSomethingToChange.bind(this), this.refreshLockWhileAcquired = this.refreshLockWhileAcquired.bind(this), void 0 === e.waiters && (e.waiters = []);\n        }\n        return e.prototype.acquireLock = function(t, a) {\n            return void 0 === a && (a = 5e3), n(this, void 0, void 0, function() {\n                var n, s, u, l, f, d;\n                return r(this, function(r) {\n                    switch(r.label){\n                        case 0:\n                            n = Date.now() + c(4), s = Date.now() + a, u = o + \"-\" + t, l = window.localStorage, r.label = 1;\n                        case 1:\n                            return Date.now() < s ? [\n                                4,\n                                i(30)\n                            ] : [\n                                3,\n                                8\n                            ];\n                        case 2:\n                            return r.sent(), null !== l.getItem(u) ? [\n                                3,\n                                5\n                            ] : (f = this.id + \"-\" + t + \"-\" + n, [\n                                4,\n                                i(Math.floor(25 * Math.random()))\n                            ]);\n                        case 3:\n                            return r.sent(), l.setItem(u, JSON.stringify({\n                                id: this.id,\n                                iat: n,\n                                timeoutKey: f,\n                                timeAcquired: Date.now(),\n                                timeRefreshed: Date.now()\n                            })), [\n                                4,\n                                i(30)\n                            ];\n                        case 4:\n                            return r.sent(), null !== (d = l.getItem(u)) && (d = JSON.parse(d)).id === this.id && d.iat === n ? (this.acquiredIatSet.add(n), this.refreshLockWhileAcquired(u, n), [\n                                2,\n                                !0\n                            ]) : [\n                                3,\n                                7\n                            ];\n                        case 5:\n                            return e.lockCorrector(), [\n                                4,\n                                this.waitForSomethingToChange(s)\n                            ];\n                        case 6:\n                            r.sent(), r.label = 7;\n                        case 7:\n                            return n = Date.now() + c(4), [\n                                3,\n                                1\n                            ];\n                        case 8:\n                            return [\n                                2,\n                                !1\n                            ];\n                    }\n                });\n            });\n        }, e.prototype.refreshLockWhileAcquired = function(e, t) {\n            return n(this, void 0, void 0, function() {\n                var o = this;\n                return r(this, function(i) {\n                    return setTimeout(function() {\n                        return n(o, void 0, void 0, function() {\n                            var n, o;\n                            return r(this, function(r) {\n                                switch(r.label){\n                                    case 0:\n                                        return [\n                                            4,\n                                            Ec.default().lock(t)\n                                        ];\n                                    case 1:\n                                        return r.sent(), this.acquiredIatSet.has(t) ? (n = window.localStorage, null === (o = n.getItem(e)) ? (Ec.default().unlock(t), [\n                                            2\n                                        ]) : ((o = JSON.parse(o)).timeRefreshed = Date.now(), n.setItem(e, JSON.stringify(o)), Ec.default().unlock(t), this.refreshLockWhileAcquired(e, t), [\n                                            2\n                                        ])) : (Ec.default().unlock(t), [\n                                            2\n                                        ]);\n                                }\n                            });\n                        });\n                    }, 1e3), [\n                        2\n                    ];\n                });\n            });\n        }, e.prototype.waitForSomethingToChange = function(t) {\n            return n(this, void 0, void 0, function() {\n                return r(this, function(n) {\n                    switch(n.label){\n                        case 0:\n                            return [\n                                4,\n                                new Promise(function(n) {\n                                    var r = !1, o = Date.now(), i = !1;\n                                    function c() {\n                                        if (i || (window.removeEventListener(\"storage\", c), e.removeFromWaiting(c), clearTimeout(a), i = !0), !r) {\n                                            r = !0;\n                                            var t = 50 - (Date.now() - o);\n                                            t > 0 ? setTimeout(n, t) : n();\n                                        }\n                                    }\n                                    window.addEventListener(\"storage\", c), e.addToWaiting(c);\n                                    var a = setTimeout(c, Math.max(0, t - Date.now()));\n                                })\n                            ];\n                        case 1:\n                            return n.sent(), [\n                                2\n                            ];\n                    }\n                });\n            });\n        }, e.addToWaiting = function(t) {\n            this.removeFromWaiting(t), void 0 !== e.waiters && e.waiters.push(t);\n        }, e.removeFromWaiting = function(t) {\n            void 0 !== e.waiters && (e.waiters = e.waiters.filter(function(e) {\n                return e !== t;\n            }));\n        }, e.notifyWaiters = function() {\n            void 0 !== e.waiters && e.waiters.slice().forEach(function(e) {\n                return e();\n            });\n        }, e.prototype.releaseLock = function(e) {\n            return n(this, void 0, void 0, function() {\n                return r(this, function(t) {\n                    switch(t.label){\n                        case 0:\n                            return [\n                                4,\n                                this.releaseLock__private__(e)\n                            ];\n                        case 1:\n                            return [\n                                2,\n                                t.sent()\n                            ];\n                    }\n                });\n            });\n        }, e.prototype.releaseLock__private__ = function(t) {\n            return n(this, void 0, void 0, function() {\n                var n, i, c;\n                return r(this, function(r) {\n                    switch(r.label){\n                        case 0:\n                            return n = window.localStorage, i = o + \"-\" + t, null === (c = n.getItem(i)) ? [\n                                2\n                            ] : (c = JSON.parse(c)).id !== this.id ? [\n                                3,\n                                2\n                            ] : [\n                                4,\n                                Ec.default().lock(c.iat)\n                            ];\n                        case 1:\n                            r.sent(), this.acquiredIatSet.delete(c.iat), n.removeItem(i), Ec.default().unlock(c.iat), e.notifyWaiters(), r.label = 2;\n                        case 2:\n                            return [\n                                2\n                            ];\n                    }\n                });\n            });\n        }, e.lockCorrector = function() {\n            for(var t = Date.now() - 5e3, n = window.localStorage, r = Object.keys(n), i = !1, c = 0; c < r.length; c++){\n                var a = r[c];\n                if (a.includes(o)) {\n                    var s = n.getItem(a);\n                    null !== s && (void 0 === (s = JSON.parse(s)).timeRefreshed && s.timeAcquired < t || void 0 !== s.timeRefreshed && s.timeRefreshed < t) && (n.removeItem(a), i = !0);\n                }\n            }\n            i && e.notifyWaiters();\n        }, e.waiters = void 0, e;\n    }();\n    t.default = a;\n}), Cc = u(xc), jc = [\n    \"login_required\",\n    \"consent_required\",\n    \"interaction_required\",\n    \"account_selection_required\",\n    \"access_denied\"\n], Rc = {\n    name: \"eartho-one-js\",\n    version: \"1.21.1\"\n}, Pc = function() {\n    return Date.now();\n}, Uc = function(e) {\n    function n(t, r) {\n        var o = e.call(this, r) || this;\n        return o.error = t, o.error_description = r, Object.setPrototypeOf(o, n.prototype), o;\n    }\n    return t(n, e), n.fromPayload = function(e) {\n        return new n(e.error, e.error_description);\n    }, n;\n}(Error), Ac = function(e) {\n    function n(t, r, o, i) {\n        void 0 === i && (i = null);\n        var c = e.call(this, t, r) || this;\n        return c.state = o, c.appState = i, Object.setPrototypeOf(c, n.prototype), c;\n    }\n    return t(n, e), n;\n}(Uc), Fc = function(e) {\n    function n() {\n        var t = e.call(this, \"timeout\", \"Timeout\") || this;\n        return Object.setPrototypeOf(t, n.prototype), t;\n    }\n    return t(n, e), n;\n}(Uc), Kc = function(e) {\n    function n(t) {\n        var r = e.call(this) || this;\n        return r.popup = t, Object.setPrototypeOf(r, n.prototype), r;\n    }\n    return t(n, e), n;\n}(Fc), Wc = function(e) {\n    function n(t) {\n        var r = e.call(this, \"cancelled\", \"Popup closed\") || this;\n        return r.popup = t, Object.setPrototypeOf(r, n.prototype), r;\n    }\n    return t(n, e), n;\n}(Uc), Lc = function(e) {\n    function n(t, r, o) {\n        var i = e.call(this, t, r) || this;\n        return i.mfa_token = o, Object.setPrototypeOf(i, n.prototype), i;\n    }\n    return t(n, e), n;\n}(Uc), Zc = function(e) {\n    return new Promise(function(t, n) {\n        var r, o = setInterval(function() {\n            e.popup && e.popup.closed && (clearInterval(o), clearTimeout(i), window.removeEventListener(\"message\", r, !1), n(new Wc(e.popup)));\n        }, 1e3), i = setTimeout(function() {\n            clearInterval(o), n(new Kc(e.popup)), window.removeEventListener(\"message\", r, !1);\n        }, 1e3 * (e.timeoutInSeconds || 360));\n        r = function(c) {\n            if (c.data && \"authorization_response\" === c.data.type) {\n                if (clearTimeout(i), clearInterval(o), window.removeEventListener(\"message\", r, !1), e.popup.close(), c.data.response.error) return n(Uc.fromPayload(c.data.response));\n                t(c.data.response);\n            }\n        }, window.addEventListener(\"message\", r);\n    });\n}, Gc = function() {\n    return window.crypto || window.msCrypto;\n}, Xc = function() {\n    var e = Gc();\n    return e.subtle || e.webkitSubtle;\n}, Vc = function() {\n    var e = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_~.\", t = \"\";\n    return Array.from(Gc().getRandomValues(new Uint8Array(43))).forEach(function(n) {\n        return t += e[n % e.length];\n    }), t;\n}, Nc = function(e) {\n    return btoa(e);\n}, Dc = function(e) {\n    return Object.keys(e).filter(function(t) {\n        return void 0 !== e[t];\n    }).map(function(t) {\n        return encodeURIComponent(t) + \"=\" + encodeURIComponent(e[t]);\n    }).join(\"&\");\n}, Yc = function(e) {\n    return o(void 0, void 0, void 0, function() {\n        var t;\n        return i(this, function(n) {\n            switch(n.label){\n                case 0:\n                    return t = Xc().digest({\n                        name: \"SHA-256\"\n                    }, (new TextEncoder).encode(e)), window.msCrypto ? [\n                        2,\n                        new Promise(function(e, n) {\n                            t.oncomplete = function(t) {\n                                e(t.target.result);\n                            }, t.onerror = function(e) {\n                                n(e.error);\n                            }, t.onabort = function() {\n                                n(\"The digest operation was aborted\");\n                            };\n                        })\n                    ] : [\n                        4,\n                        t\n                    ];\n                case 1:\n                    return [\n                        2,\n                        n.sent()\n                    ];\n            }\n        });\n    });\n}, Bc = function(e) {\n    return function(e) {\n        return decodeURIComponent(atob(e).split(\"\").map(function(e) {\n            return \"%\" + (\"00\" + e.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n    }(e.replace(/_/g, \"/\").replace(/-/g, \"+\"));\n}, Mc = function(e) {\n    var t = new Uint8Array(e);\n    return function(e) {\n        var t = {\n            \"+\": \"-\",\n            \"/\": \"_\",\n            \"=\": \"\"\n        };\n        return e.replace(/[+/=]/g, function(e) {\n            return t[e];\n        });\n    }(window.btoa(String.fromCharCode.apply(String, a([], c(Array.from(t)), !1))));\n};\nvar Jc = function(e, t) {\n    return o(void 0, void 0, void 0, function() {\n        var n, r;\n        return i(this, function(o) {\n            switch(o.label){\n                case 0:\n                    return [\n                        4,\n                        (i = e, c = t, c = c || {}, new Promise(function(e, t) {\n                            var n = new XMLHttpRequest, r = [], o = [], a = {}, s = function() {\n                                return {\n                                    ok: 2 == (n.status / 100 | 0),\n                                    statusText: n.statusText,\n                                    status: n.status,\n                                    url: n.responseURL,\n                                    text: function() {\n                                        return Promise.resolve(n.responseText);\n                                    },\n                                    json: function() {\n                                        return Promise.resolve(n.responseText).then(JSON.parse);\n                                    },\n                                    blob: function() {\n                                        return Promise.resolve(new Blob([\n                                            n.response\n                                        ]));\n                                    },\n                                    clone: s,\n                                    headers: {\n                                        keys: function() {\n                                            return r;\n                                        },\n                                        entries: function() {\n                                            return o;\n                                        },\n                                        get: function(e) {\n                                            return a[e.toLowerCase()];\n                                        },\n                                        has: function(e) {\n                                            return e.toLowerCase() in a;\n                                        }\n                                    }\n                                };\n                            };\n                            for(var u in n.open(c.method || \"get\", i, !0), n.onload = function() {\n                                n.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function(e, t, n) {\n                                    r.push(t = t.toLowerCase()), o.push([\n                                        t,\n                                        n\n                                    ]), a[t] = a[t] ? a[t] + \",\" + n : n;\n                                }), e(s());\n                            }, n.onerror = t, n.withCredentials = \"include\" == c.credentials, c.headers)n.setRequestHeader(u, c.headers[u]);\n                            n.send(c.body || null);\n                        }))\n                    ];\n                case 1:\n                    return n = o.sent(), r = {\n                        ok: n.ok\n                    }, [\n                        4,\n                        n.json()\n                    ];\n                case 2:\n                    return [\n                        2,\n                        (r.json = o.sent(), r)\n                    ];\n            }\n            var i, c;\n        });\n    });\n}, zc = function(e, t, n) {\n    return o(void 0, void 0, void 0, function() {\n        var r, o;\n        return i(this, function(i) {\n            return r = new AbortController, t.signal = r.signal, [\n                2,\n                Promise.race([\n                    Jc(e, t),\n                    new Promise(function(e, t) {\n                        o = setTimeout(function() {\n                            r.abort(), t(new Error(\"Timeout when executing 'fetch'\"));\n                        }, n);\n                    })\n                ]).finally(function() {\n                    clearTimeout(o);\n                })\n            ];\n        });\n    });\n}, Hc = function(e, t, n, r, c, a, s) {\n    return o(void 0, void 0, void 0, function() {\n        return i(this, function(o) {\n            return [\n                2,\n                (i = {\n                    auth: {\n                        audience: t,\n                        scope: n\n                    },\n                    timeout: c,\n                    fetchUrl: e,\n                    fetchOptions: r,\n                    useFormData: s\n                }, u = a, new Promise(function(e, t) {\n                    var n = new MessageChannel;\n                    n.port1.onmessage = function(n) {\n                        n.data.error ? t(new Error(n.data.error)) : e(n.data);\n                    }, u.postMessage(i, [\n                        n.port2\n                    ]);\n                }))\n            ];\n            var i, u;\n        });\n    });\n}, qc = function(e, t, n, r, c, a, s) {\n    return void 0 === s && (s = 1e4), o(void 0, void 0, void 0, function() {\n        return i(this, function(o) {\n            return c ? [\n                2,\n                Hc(e, t, n, r, s, c, a)\n            ] : [\n                2,\n                zc(e, r, s)\n            ];\n        });\n    });\n};\nfunction Qc(e, t, n, c, a, s, u) {\n    return o(this, void 0, void 0, function() {\n        var o, l, f, d, h, p, y, v, m;\n        return i(this, function(i) {\n            switch(i.label){\n                case 0:\n                    o = null, f = 0, i.label = 1;\n                case 1:\n                    if (!(f < 3)) return [\n                        3,\n                        6\n                    ];\n                    i.label = 2;\n                case 2:\n                    return i.trys.push([\n                        2,\n                        4,\n                        ,\n                        5\n                    ]), [\n                        4,\n                        qc(e, n, c, a, s, u, t)\n                    ];\n                case 3:\n                    return l = i.sent(), o = null, [\n                        3,\n                        6\n                    ];\n                case 4:\n                    return d = i.sent(), o = d, [\n                        3,\n                        5\n                    ];\n                case 5:\n                    return f++, [\n                        3,\n                        1\n                    ];\n                case 6:\n                    if (o) throw o.message = o.message || \"Failed to fetch\", o;\n                    if (h = l.json, p = h.error, y = h.error_description, v = r(h, [\n                        \"error\",\n                        \"error_description\"\n                    ]), !l.ok) {\n                        if (m = y || \"HTTP error. Unable to fetch \".concat(e), \"mfa_required\" === p) throw new Lc(p, m, v.mfa_token);\n                        throw new Uc(p || \"request_error\", m);\n                    }\n                    return [\n                        2,\n                        v\n                    ];\n            }\n        });\n    });\n}\nfunction $c(e, t) {\n    var n = e.baseUrl, c = e.timeout, a = e.audience, s = e.scope, u = e.earthoOne, l = e.useFormData, f = r(e, [\n        \"baseUrl\",\n        \"timeout\",\n        \"audience\",\n        \"scope\",\n        \"earthoOne\",\n        \"useFormData\"\n    ]);\n    return o(this, void 0, void 0, function() {\n        var e;\n        return i(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return e = l ? Dc(f) : JSON.stringify(f), [\n                        4,\n                        Qc(n, c, a || \"default\", s, {\n                            method: \"POST\",\n                            body: e,\n                            headers: {\n                                \"Content-Type\": l ? \"application/x-www-form-urlencoded\" : \"application/json\",\n                                \"Eartho-Client\": btoa(JSON.stringify(u || Rc))\n                            }\n                        }, t, l)\n                    ];\n                case 1:\n                    return [\n                        2,\n                        r.sent()\n                    ];\n            }\n        });\n    });\n}\nvar ea = function(e) {\n    return Array.from(new Set(e));\n}, ta = function() {\n    for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];\n    return ea(e.join(\" \").trim().split(/\\s+/)).join(\" \");\n}, na = function() {\n    function e(e, t) {\n        void 0 === t && (t = \"@@earthoOnespajs@@\"), this.prefix = t, this.client_id = e.client_id, this.audience = e.audience;\n    }\n    return e.prototype.toKey = function() {\n        return \"\".concat(this.prefix, \"::\").concat(this.client_id, \"::\").concat(this.audience, \"::\").concat(this.scope);\n    }, e.fromKey = function(t) {\n        var n = c(t.split(\"::\"), 4), r = n[0], o = n[1], i = n[2];\n        return new e({\n            client_id: o,\n            scope: n[3],\n            audience: i\n        }, r);\n    }, e.fromCacheEntry = function(t) {\n        return new e({\n            scope: t.scope,\n            audience: t.audience,\n            client_id: t.client_id\n        });\n    }, e;\n}(), ra = function() {\n    function e() {}\n    return e.prototype.set = function(e, t) {\n        localStorage.setItem(e, JSON.stringify(t));\n    }, e.prototype.get = function(e) {\n        var t = window.localStorage.getItem(e);\n        if (t) try {\n            return JSON.parse(t);\n        } catch (e) {\n            return void console.log(e);\n        }\n    }, e.prototype.remove = function(e) {\n        localStorage.removeItem(e);\n    }, e.prototype.allKeys = function() {\n        return Object.keys(window.localStorage).filter(function(e) {\n            return e.startsWith(\"@@earthoOnespajs@@\");\n        });\n    }, e;\n}(), oa = function() {\n    var e;\n    this.enclosedCache = (e = {}, {\n        set: function(t, n) {\n            e[t] = n;\n        },\n        get: function(t) {\n            var n = e[t];\n            if (n) return n;\n        },\n        remove: function(t) {\n            delete e[t];\n        },\n        allKeys: function() {\n            return Object.keys(e);\n        }\n    });\n}, ia = function() {\n    function e(e, t, n) {\n        this.cache = e, this.keyManifest = t, this.nowProvider = n, this.nowProvider = this.nowProvider || Pc;\n    }\n    return e.prototype.get = function(e, t) {\n        return o(this, void 0, void 0, function() {\n            var t, n, r;\n            return i(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        return [\n                            4,\n                            this.cache.get(e.toKey())\n                        ];\n                    case 1:\n                        return (t = o.sent()) ? [\n                            3,\n                            4\n                        ] : [\n                            4,\n                            this.getCacheKeys()\n                        ];\n                    case 2:\n                        return (n = o.sent()) ? (r = this.matchExistingCacheKey(e, n)) ? [\n                            4,\n                            this.cache.get(r)\n                        ] : [\n                            3,\n                            4\n                        ] : [\n                            2\n                        ];\n                    case 3:\n                        t = o.sent(), o.label = 4;\n                    case 4:\n                        return t ? [\n                            4,\n                            this.nowProvider()\n                        ] : [\n                            2\n                        ];\n                    case 5:\n                        return o.sent(), [\n                            2,\n                            t.body\n                        ];\n                }\n            });\n        });\n    }, e.prototype.set = function(e) {\n        var t;\n        return o(this, void 0, void 0, function() {\n            var n, r;\n            return i(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        return n = new na({\n                            client_id: e.client_id,\n                            scope: e.scope,\n                            audience: e.audience\n                        }), [\n                            4,\n                            this.wrapCacheEntry(e)\n                        ];\n                    case 1:\n                        return r = o.sent(), [\n                            4,\n                            this.cache.set(n.toKey(), r)\n                        ];\n                    case 2:\n                        return o.sent(), [\n                            4,\n                            null === (t = this.keyManifest) || void 0 === t ? void 0 : t.add(n.toKey())\n                        ];\n                    case 3:\n                        return o.sent(), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.clear = function(e) {\n        var t;\n        return o(this, void 0, void 0, function() {\n            var n, r = this;\n            return i(this, function(c) {\n                switch(c.label){\n                    case 0:\n                        return [\n                            4,\n                            this.getCacheKeys()\n                        ];\n                    case 1:\n                        return (n = c.sent()) ? [\n                            4,\n                            n.filter(function(t) {\n                                return !e || t.includes(e);\n                            }).reduce(function(e, t) {\n                                return o(r, void 0, void 0, function() {\n                                    return i(this, function(n) {\n                                        switch(n.label){\n                                            case 0:\n                                                return [\n                                                    4,\n                                                    e\n                                                ];\n                                            case 1:\n                                                return n.sent(), [\n                                                    4,\n                                                    this.cache.remove(t)\n                                                ];\n                                            case 2:\n                                                return n.sent(), [\n                                                    2\n                                                ];\n                                        }\n                                    });\n                                });\n                            }, Promise.resolve())\n                        ] : [\n                            2\n                        ];\n                    case 2:\n                        return c.sent(), [\n                            4,\n                            null === (t = this.keyManifest) || void 0 === t ? void 0 : t.clear()\n                        ];\n                    case 3:\n                        return c.sent(), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.clearSync = function(e) {\n        var t = this, n = this.cache.allKeys();\n        n && n.filter(function(t) {\n            return !e || t.includes(e);\n        }).forEach(function(e) {\n            t.cache.remove(e);\n        });\n    }, e.prototype.wrapCacheEntry = function(e) {\n        return o(this, void 0, void 0, function() {\n            var t, n, r;\n            return i(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        return [\n                            4,\n                            this.nowProvider()\n                        ];\n                    case 1:\n                        return t = o.sent(), n = Math.floor(t / 1e3) + e.expires_in, r = Math.min(n, e.decodedToken.claims.exp), [\n                            2,\n                            {\n                                body: e,\n                                expiresAt: r\n                            }\n                        ];\n                }\n            });\n        });\n    }, e.prototype.getCacheKeys = function() {\n        var e;\n        return o(this, void 0, void 0, function() {\n            var t;\n            return i(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return this.keyManifest ? [\n                            4,\n                            this.keyManifest.get()\n                        ] : [\n                            3,\n                            2\n                        ];\n                    case 1:\n                        return t = null === (e = n.sent()) || void 0 === e ? void 0 : e.keys, [\n                            3,\n                            4\n                        ];\n                    case 2:\n                        return [\n                            4,\n                            this.cache.allKeys()\n                        ];\n                    case 3:\n                        t = n.sent(), n.label = 4;\n                    case 4:\n                        return [\n                            2,\n                            t\n                        ];\n                }\n            });\n        });\n    }, e.prototype.matchExistingCacheKey = function(e, t) {\n        return t.filter(function(t) {\n            var n = na.fromKey(t), r = new Set(n.scope && n.scope.split(\" \")), o = e.scope.split(\" \"), i = n.scope && o.reduce(function(e, t) {\n                return e && r.has(t);\n            }, !0);\n            return \"@@earthoOnespajs@@\" === n.prefix && n.client_id === e.client_id && n.audience === e.audience && i;\n        })[0];\n    }, e;\n}(), ca = function() {\n    function e(e, t) {\n        this.storage = e, this.clientId = t, this.storageKey = \"\".concat(\"a0.spajs.txs\", \".\").concat(this.clientId), this.transaction = this.storage.get(this.storageKey);\n    }\n    return e.prototype.create = function(e) {\n        this.transaction = e, this.storage.save(this.storageKey, e, {\n            daysUntilExpire: 1\n        });\n    }, e.prototype.get = function() {\n        return this.transaction;\n    }, e.prototype.remove = function() {\n        delete this.transaction, this.storage.remove(this.storageKey);\n    }, e;\n}(), aa = function(e) {\n    return \"number\" == typeof e;\n}, sa = [\n    \"iss\",\n    \"aud\",\n    \"exp\",\n    \"nbf\",\n    \"iat\",\n    \"jti\",\n    \"azp\",\n    \"nonce\",\n    \"auth_time\",\n    \"at_hash\",\n    \"c_hash\",\n    \"acr\",\n    \"amr\",\n    \"sub_jwk\",\n    \"cnf\",\n    \"sip_from_tag\",\n    \"sip_date\",\n    \"sip_callid\",\n    \"sip_cseq_num\",\n    \"sip_via_branch\",\n    \"orig\",\n    \"dest\",\n    \"mky\",\n    \"events\",\n    \"toe\",\n    \"txn\",\n    \"rph\",\n    \"sid\",\n    \"vot\",\n    \"vtm\"\n], ua = function(e) {\n    if (!e.id_token) throw new Error(\"ID token is required but missing\");\n    var t = function(e) {\n        var t = e.split(\".\"), n = c(t, 3), r = n[0], o = n[1], i = n[2];\n        if (3 !== t.length || !r || !o || !i) throw new Error(\"ID token could not be decoded\");\n        var a = JSON.parse(Bc(o)), s = {\n            __raw: e\n        }, u = {};\n        return Object.keys(a).forEach(function(e) {\n            s[e] = a[e], sa.includes(e) || (u[e] = a[e]);\n        }), {\n            encoded: {\n                header: r,\n                payload: o,\n                signature: i\n            },\n            header: JSON.parse(Bc(r)),\n            claims: s,\n            user: u\n        };\n    }(e.id_token);\n    if (!t.claims.iss) throw new Error(\"Issuer (iss) claim must be a string present in the ID token\");\n    if (t.claims.iss !== e.iss) throw new Error('Issuer (iss) claim mismatch in the ID token; expected \"'.concat(e.iss, '\", found \"').concat(t.claims.iss, '\"'));\n    if (!t.user.sub) throw new Error(\"Subject (sub) claim must be a string present in the ID token\");\n    if (\"RS256\" !== t.header.alg) throw new Error('Signature algorithm of \"'.concat(t.header.alg, '\" is not supported. Expected the ID token to be signed with \"RS256\".'));\n    if (!t.claims.aud || \"string\" != typeof t.claims.aud && !Array.isArray(t.claims.aud)) throw new Error(\"Audience (aud) claim must be a string or array of strings present in the ID token\");\n    if (Array.isArray(t.claims.aud)) {\n        if (!t.claims.aud.includes(e.aud)) throw new Error('Audience (aud) claim mismatch in the ID token; expected \"'.concat(e.aud, '\" but was not one of \"').concat(t.claims.aud.join(\", \"), '\"'));\n        if (t.claims.aud.length > 1) {\n            if (!t.claims.azp) throw new Error(\"Authorized Party (azp) claim must be a string present in the ID token when Audience (aud) claim has multiple values\");\n            if (t.claims.azp !== e.aud) throw new Error('Authorized Party (azp) claim mismatch in the ID token; expected \"'.concat(e.aud, '\", found \"').concat(t.claims.azp, '\"'));\n        }\n    } else if (t.claims.aud !== e.aud) throw new Error('Audience (aud) claim mismatch in the ID token; expected \"'.concat(e.aud, '\" but found \"').concat(t.claims.aud, '\"'));\n    if (e.nonce) {\n        if (!t.claims.nonce) throw new Error(\"Nonce (nonce) claim must be a string present in the ID token\");\n        if (t.claims.nonce !== e.nonce) throw new Error('Nonce (nonce) claim mismatch in the ID token; expected \"'.concat(e.nonce, '\", found \"').concat(t.claims.nonce, '\"'));\n    }\n    if (e.max_age && !aa(t.claims.auth_time)) throw new Error(\"Authentication Time (auth_time) claim must be a number present in the ID token when Max Age (max_age) is specified\");\n    if (!aa(t.claims.exp)) throw new Error(\"Expiration Time (exp) claim must be a number present in the ID token\");\n    if (!aa(t.claims.iat)) throw new Error(\"Issued At (iat) claim must be a number present in the ID token\");\n    var n = e.leeway || 60, r = new Date(e.now || Date.now()), o = new Date(0), i = new Date(0), a = new Date(0);\n    if (a.setUTCSeconds(parseInt(t.claims.auth_time) + e.max_age + n), o.setUTCSeconds(t.claims.exp + n), i.setUTCSeconds(t.claims.nbf - n), r > o) throw new Error(\"Expiration Time (exp) claim error in the ID token; current time (\".concat(r, \") is after expiration time (\").concat(o, \")\"));\n    if (aa(t.claims.nbf) && r < i) throw new Error(\"Not Before time (nbf) claim in the ID token indicates that this token can't be used just yet. Currrent time (\".concat(r, \") is before \").concat(i));\n    if (aa(t.claims.auth_time) && r > a) throw new Error(\"Authentication Time (auth_time) claim in the ID token indicates that too much time has passed since the last end-user authentication. Currrent time (\".concat(r, \") is after last auth at \").concat(a));\n    return t;\n}, la = l(function(e, t) {\n    var n = s && s.__assign || function() {\n        return n = Object.assign || function(e) {\n            for(var t, n = 1, r = arguments.length; n < r; n++)for(var o in t = arguments[n])Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n            return e;\n        }, n.apply(this, arguments);\n    };\n    function r(e, t) {\n        if (!t) return \"\";\n        var n = \"; \" + e;\n        return !0 === t ? n : n + \"=\" + t;\n    }\n    function o(e, t, n) {\n        return encodeURIComponent(e).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\") + \"=\" + encodeURIComponent(t).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent) + function(e) {\n            if (\"number\" == typeof e.expires) {\n                var t = new Date;\n                t.setMilliseconds(t.getMilliseconds() + 864e5 * e.expires), e.expires = t;\n            }\n            return r(\"Expires\", e.expires ? e.expires.toUTCString() : \"\") + r(\"Domain\", e.domain) + r(\"Path\", e.path) + r(\"Secure\", e.secure) + r(\"SameSite\", e.sameSite);\n        }(n);\n    }\n    function i(e) {\n        for(var t = {}, n = e ? e.split(\"; \") : [], r = /(%[\\dA-F]{2})+/gi, o = 0; o < n.length; o++){\n            var i = n[o].split(\"=\"), c = i.slice(1).join(\"=\");\n            '\"' === c.charAt(0) && (c = c.slice(1, -1));\n            try {\n                t[i[0].replace(r, decodeURIComponent)] = c.replace(r, decodeURIComponent);\n            } catch (e) {}\n        }\n        return t;\n    }\n    function c() {\n        return i(document.cookie);\n    }\n    function a(e, t, r) {\n        document.cookie = o(e, t, n({\n            path: \"/\"\n        }, r));\n    }\n    t.__esModule = !0, t.encode = o, t.parse = i, t.getAll = c, t.get = function(e) {\n        return c()[e];\n    }, t.set = a, t.remove = function(e, t) {\n        a(e, \"\", n(n({}, t), {\n            expires: -1\n        }));\n    };\n});\nu(la), la.encode, la.parse, la.getAll;\nvar fa = la.get, da = la.set, ha = la.remove, pa = {\n    get: function(e) {\n        var t = fa(e);\n        if (void 0 !== t) return JSON.parse(t);\n    },\n    save: function(e, t, n) {\n        var r = {};\n        \"https:\" === window.location.protocol && (r = {\n            secure: !0,\n            sameSite: \"none\"\n        }), (null == n ? void 0 : n.daysUntilExpire) && (r.expires = n.daysUntilExpire), (null == n ? void 0 : n.cookieDomain) && (r.domain = n.cookieDomain), da(e, JSON.stringify(t), r);\n    },\n    remove: function(e) {\n        ha(e);\n    }\n}, ya = {\n    get: function(e) {\n        var t = pa.get(e);\n        return t || pa.get(\"\".concat(\"_legacy_\").concat(e));\n    },\n    save: function(e, t, n) {\n        var r = {};\n        \"https:\" === window.location.protocol && (r = {\n            secure: !0\n        }), (null == n ? void 0 : n.daysUntilExpire) && (r.expires = n.daysUntilExpire), da(\"\".concat(\"_legacy_\").concat(e), JSON.stringify(t), r), pa.save(e, t, n);\n    },\n    remove: function(e) {\n        pa.remove(e), pa.remove(\"\".concat(\"_legacy_\").concat(e));\n    }\n}, va = {\n    get: function(e) {\n        if (\"undefined\" != typeof sessionStorage) {\n            var t = sessionStorage.getItem(e);\n            if (void 0 !== t) return JSON.parse(t);\n        }\n    },\n    save: function(e, t) {\n        sessionStorage.setItem(e, JSON.stringify(t));\n    },\n    remove: function(e) {\n        sessionStorage.removeItem(e);\n    }\n};\nfunction ma(e, t, n) {\n    var r = void 0 === t ? null : t, o = function(e, t) {\n        var n = atob(e);\n        if (t) {\n            for(var r = new Uint8Array(n.length), o = 0, i = n.length; o < i; ++o)r[o] = n.charCodeAt(o);\n            return String.fromCharCode.apply(null, new Uint16Array(r.buffer));\n        }\n        return n;\n    }(e, void 0 !== n && n), i = o.indexOf(\"\\n\", 10) + 1, c = o.substring(i) + (r ? \"//# sourceMappingURL=\" + r : \"\"), a = new Blob([\n        c\n    ], {\n        type: \"application/javascript\"\n    });\n    return URL.createObjectURL(a);\n}\nvar ba, ga, wa, Sa, _a = (ba = \"Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Ci8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uCgogICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55CiAgICBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuCgogICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEgKICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWQogICAgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULAogICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NCiAgICBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUgogICAgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUgogICAgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS4KICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovdmFyIGU9ZnVuY3Rpb24oKXtyZXR1cm4gZT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHIsdD0xLG49YXJndW1lbnRzLmxlbmd0aDt0PG47dCsrKWZvcih2YXIgbyBpbiByPWFyZ3VtZW50c1t0XSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocixvKSYmKGVbb109cltvXSk7cmV0dXJuIGV9LGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtmdW5jdGlvbiByKGUscix0LG4pe3JldHVybiBuZXcodHx8KHQ9UHJvbWlzZSkpKChmdW5jdGlvbihvLGEpe2Z1bmN0aW9uIHMoZSl7dHJ5e2Mobi5uZXh0KGUpKX1jYXRjaChlKXthKGUpfX1mdW5jdGlvbiBpKGUpe3RyeXtjKG4udGhyb3coZSkpfWNhdGNoKGUpe2EoZSl9fWZ1bmN0aW9uIGMoZSl7dmFyIHI7ZS5kb25lP28oZS52YWx1ZSk6KHI9ZS52YWx1ZSxyIGluc3RhbmNlb2YgdD9yOm5ldyB0KChmdW5jdGlvbihlKXtlKHIpfSkpKS50aGVuKHMsaSl9Yygobj1uLmFwcGx5KGUscnx8W10pKS5uZXh0KCkpfSkpfWZ1bmN0aW9uIHQoZSxyKXt2YXIgdCxuLG8sYSxzPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm9bMF0pdGhyb3cgb1sxXTtyZXR1cm4gb1sxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBhPXtuZXh0OmkoMCksdGhyb3c6aSgxKSxyZXR1cm46aSgyKX0sImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmKGFbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksYTtmdW5jdGlvbiBpKGEpe3JldHVybiBmdW5jdGlvbihpKXtyZXR1cm4gZnVuY3Rpb24oYSl7aWYodCl0aHJvdyBuZXcgVHlwZUVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuIik7Zm9yKDtzOyl0cnl7aWYodD0xLG4mJihvPTImYVswXT9uLnJldHVybjphWzBdP24udGhyb3d8fCgobz1uLnJldHVybikmJm8uY2FsbChuKSwwKTpuLm5leHQpJiYhKG89by5jYWxsKG4sYVsxXSkpLmRvbmUpcmV0dXJuIG87c3dpdGNoKG49MCxvJiYoYT1bMiZhWzBdLG8udmFsdWVdKSxhWzBdKXtjYXNlIDA6Y2FzZSAxOm89YTticmVhaztjYXNlIDQ6cmV0dXJuIHMubGFiZWwrKyx7dmFsdWU6YVsxXSxkb25lOiExfTtjYXNlIDU6cy5sYWJlbCsrLG49YVsxXSxhPVswXTtjb250aW51ZTtjYXNlIDc6YT1zLm9wcy5wb3AoKSxzLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKG89cy50cnlzLChvPW8ubGVuZ3RoPjAmJm9bby5sZW5ndGgtMV0pfHw2IT09YVswXSYmMiE9PWFbMF0pKXtzPTA7Y29udGludWV9aWYoMz09PWFbMF0mJighb3x8YVsxXT5vWzBdJiZhWzFdPG9bM10pKXtzLmxhYmVsPWFbMV07YnJlYWt9aWYoNj09PWFbMF0mJnMubGFiZWw8b1sxXSl7cy5sYWJlbD1vWzFdLG89YTticmVha31pZihvJiZzLmxhYmVsPG9bMl0pe3MubGFiZWw9b1syXSxzLm9wcy5wdXNoKGEpO2JyZWFrfW9bMl0mJnMub3BzLnBvcCgpLHMudHJ5cy5wb3AoKTtjb250aW51ZX1hPXIuY2FsbChlLHMpfWNhdGNoKGUpe2E9WzYsZV0sbj0wfWZpbmFsbHl7dD1vPTB9aWYoNSZhWzBdKXRocm93IGFbMV07cmV0dXJue3ZhbHVlOmFbMF0/YVsxXTp2b2lkIDAsZG9uZTohMH19KFthLGldKX19fXZhciBuPXt9LG89ZnVuY3Rpb24oZSxyKXtyZXR1cm4iIi5jb25jYXQoZSwifCIpLmNvbmNhdChyKX07YWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsKGZ1bmN0aW9uKGEpe3ZhciBzPWEuZGF0YSxpPXMudGltZW91dCxjPXMuYXV0aCx1PXMuZmV0Y2hVcmwsZj1zLmZldGNoT3B0aW9ucyxsPXMudXNlRm9ybURhdGEsaD1mdW5jdGlvbihlLHIpe3ZhciB0PSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighdClyZXR1cm4gZTt2YXIgbixvLGE9dC5jYWxsKGUpLHM9W107dHJ5e2Zvcig7KHZvaWQgMD09PXJ8fHItLSA+MCkmJiEobj1hLm5leHQoKSkuZG9uZTspcy5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe289e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJih0PWEucmV0dXJuKSYmdC5jYWxsKGEpfWZpbmFsbHl7aWYobyl0aHJvdyBvLmVycm9yfX1yZXR1cm4gc30oYS5wb3J0cywxKVswXTtyZXR1cm4gcih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgcixhLHMscCx5LGIsZCx2LHcsZztyZXR1cm4gdCh0aGlzLChmdW5jdGlvbih0KXtzd2l0Y2godC5sYWJlbCl7Y2FzZSAwOnM9KGE9Y3x8e30pLmF1ZGllbmNlLHA9YS5zY29wZSx0LmxhYmVsPTE7Y2FzZSAxOmlmKHQudHJ5cy5wdXNoKFsxLDcsLDhdKSwhKHk9bD8oaz1mLmJvZHksUz1uZXcgVVJMU2VhcmNoUGFyYW1zKGspLF89e30sUy5mb3JFYWNoKChmdW5jdGlvbihlLHIpe19bcl09ZX0pKSxfKTpKU09OLnBhcnNlKGYuYm9keSkpLnJlZnJlc2hfdG9rZW4mJiJyZWZyZXNoX3Rva2VuIj09PXkuZ3JhbnRfdHlwZSl7aWYoYj1mdW5jdGlvbihlLHIpe3JldHVybiBuW28oZSxyKV19KHMscCksIWIpdGhyb3cgbmV3IEVycm9yKCJUaGUgd2ViIHdvcmtlciBpcyBtaXNzaW5nIHRoZSByZWZyZXNoIHRva2VuIik7Zi5ib2R5PWw/bmV3IFVSTFNlYXJjaFBhcmFtcyhlKGUoe30seSkse3JlZnJlc2hfdG9rZW46Yn0pKS50b1N0cmluZygpOkpTT04uc3RyaW5naWZ5KGUoZSh7fSx5KSx7cmVmcmVzaF90b2tlbjpifSkpfWQ9dm9pZCAwLCJmdW5jdGlvbiI9PXR5cGVvZiBBYm9ydENvbnRyb2xsZXImJihkPW5ldyBBYm9ydENvbnRyb2xsZXIsZi5zaWduYWw9ZC5zaWduYWwpLHY9dm9pZCAwLHQubGFiZWw9MjtjYXNlIDI6cmV0dXJuIHQudHJ5cy5wdXNoKFsyLDQsLDVdKSxbNCxQcm9taXNlLnJhY2UoWyhtPWksbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUpe3JldHVybiBzZXRUaW1lb3V0KGUsbSl9KSkpLGZldGNoKHUsZSh7fSxmKSldKV07Y2FzZSAzOnJldHVybiB2PXQuc2VudCgpLFszLDVdO2Nhc2UgNDpyZXR1cm4gdz10LnNlbnQoKSxoLnBvc3RNZXNzYWdlKHtlcnJvcjp3Lm1lc3NhZ2V9KSxbMl07Y2FzZSA1OnJldHVybiB2P1s0LHYuanNvbigpXTooZCYmZC5hYm9ydCgpLGgucG9zdE1lc3NhZ2Uoe2Vycm9yOiJUaW1lb3V0IHdoZW4gZXhlY3V0aW5nICdmZXRjaCcifSksWzJdKTtjYXNlIDY6cmV0dXJuKHI9dC5zZW50KCkpLnJlZnJlc2hfdG9rZW4/KGZ1bmN0aW9uKGUscix0KXtuW28ocix0KV09ZX0oci5yZWZyZXNoX3Rva2VuLHMscCksZGVsZXRlIHIucmVmcmVzaF90b2tlbik6ZnVuY3Rpb24oZSxyKXtkZWxldGUgbltvKGUscildfShzLHApLGgucG9zdE1lc3NhZ2Uoe29rOnYub2ssanNvbjpyfSksWzMsOF07Y2FzZSA3OnJldHVybiBnPXQuc2VudCgpLGgucG9zdE1lc3NhZ2Uoe29rOiExLGpzb246e2Vycm9yX2Rlc2NyaXB0aW9uOmcubWVzc2FnZX19KSxbMyw4XTtjYXNlIDg6cmV0dXJuWzJdfXZhciBtLGssUyxffSkpfSkpfSkpfSgpOwoK\", ga = null, wa = !1, function(e) {\n    return Sa = Sa || ma(ba, ga, wa), new Worker(Sa, e);\n}), ka = {}, Oa = function(e, t) {\n    var n = ka[t];\n    return n || (n = e().finally(function() {\n        delete ka[t], n = null;\n    }), ka[t] = n), n;\n}, Ia = function() {\n    function e(e, t) {\n        this.cache = e, this.clientId = t, this.manifestKey = this.createManifestKeyFrom(this.clientId);\n    }\n    return e.prototype.add = function(e) {\n        var t;\n        return o(this, void 0, void 0, function() {\n            var n, r;\n            return i(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        return r = Set.bind, [\n                            4,\n                            this.cache.get(this.manifestKey)\n                        ];\n                    case 1:\n                        return (n = new (r.apply(Set, [\n                            void 0,\n                            (null === (t = o.sent()) || void 0 === t ? void 0 : t.keys) || []\n                        ]))).add(e), [\n                            4,\n                            this.cache.set(this.manifestKey, {\n                                keys: a([], c(n), !1)\n                            })\n                        ];\n                    case 2:\n                        return o.sent(), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.remove = function(e) {\n        return o(this, void 0, void 0, function() {\n            var t, n;\n            return i(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.cache.get(this.manifestKey)\n                        ];\n                    case 1:\n                        return (t = r.sent()) ? ((n = new Set(t.keys)).delete(e), n.size > 0 ? [\n                            4,\n                            this.cache.set(this.manifestKey, {\n                                keys: a([], c(n), !1)\n                            })\n                        ] : [\n                            3,\n                            3\n                        ]) : [\n                            3,\n                            5\n                        ];\n                    case 2:\n                    case 4:\n                        return [\n                            2,\n                            r.sent()\n                        ];\n                    case 3:\n                        return [\n                            4,\n                            this.cache.remove(this.manifestKey)\n                        ];\n                    case 5:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.get = function() {\n        return this.cache.get(this.manifestKey);\n    }, e.prototype.clear = function() {\n        return this.cache.remove(this.manifestKey);\n    }, e.prototype.createManifestKeyFrom = function(e) {\n        return \"\".concat(\"@@earthoOnespajs@@\", \"::\").concat(e);\n    }, e;\n}(), Ta = new Cc, Ea = {\n    memory: function() {\n        return (new oa).enclosedCache;\n    },\n    localstorage: function() {\n        return new ra;\n    }\n}, xa = function(e) {\n    return Ea[e];\n}, Ca = function() {\n    return !/Trident.*rv:11\\.0/.test(navigator.userAgent);\n}, ja = function() {\n    function e(e) {\n        var t, n, o, i, c, a;\n        if (this.options = e,  false && 0, e.domain = e.domain || \"one.eartho.world\", this.domainUrl = (i = this.options.domain, /^https?:\\/\\//.test(i) ? i : \"https://\".concat(i)), this.tokenIssuer = \"https://one.eartho.world/\", this.options.useRefreshTokens = !0, this.options.cacheLocation = \"localstorage\", this.options.redirect_uri = this.options.redirect_uri || (null === (t = null === window || void 0 === window ? void 0 : window.location) || void 0 === t ? void 0 : t.href), this.defaultScope = ta(\"openid\", void 0 !== (null === (o = null === (n = this.options) || void 0 === n ? void 0 : n.advancedOptions) || void 0 === o ? void 0 : o.defaultScope) ? this.options.advancedOptions.defaultScope : \"openid profile email\"), e.cache && e.cacheLocation && console.warn(\"Both `cache` and `cacheLocation` options have been specified in the earthoOne configuration; ignoring `cacheLocation` and using `cache`.\"), e.cache) c = e.cache;\n        else {\n            if (this.cacheLocation = e.cacheLocation || \"memory\", !xa(this.cacheLocation)) throw new Error('Invalid cache location \"'.concat(this.cacheLocation, '\"'));\n            c = xa(this.cacheLocation)();\n        }\n        this.httpTimeoutMs = e.httpTimeoutInSeconds ? 1e3 * e.httpTimeoutInSeconds : 1e4, this.cookieStorage = !1 === e.legacySameSiteCookie ? pa : ya, this.isConnectedCookieName = (a = this.options.client_id, \"earthoOne.\".concat(a, \".is.authenticated\")), this.sessionCheckExpiryDays = e.sessionCheckExpiryDays || 1;\n        var s = e.useCookiesForTransactions ? this.cookieStorage : va;\n        this.scope = this.options.scope, this.transactionManager = new ca(s, this.options.client_id), this.nowProvider = this.options.nowProvider || Pc, this.cacheManager = new ia(c, c.allKeys ? null : new Ia(c, this.options.client_id), this.nowProvider), this.options.useRefreshTokens && (this.scope = ta(this.scope, \"offline_access\")),  false && (0), this.customOptions = function(e) {\n            return e.advancedOptions, e.audience, e.earthoOne, e.authorizeTimeoutInSeconds, e.cacheLocation, e.client_id, e.domain, e.issuer, e.leeway, e.max_age, e.redirect_uri, e.scope, e.useRefreshTokens, e.useCookiesForTransactions, e.useFormData, r(e, [\n                \"advancedOptions\",\n                \"audience\",\n                \"earthoOne\",\n                \"authorizeTimeoutInSeconds\",\n                \"cacheLocation\",\n                \"client_id\",\n                \"domain\",\n                \"issuer\",\n                \"leeway\",\n                \"max_age\",\n                \"redirect_uri\",\n                \"scope\",\n                \"useRefreshTokens\",\n                \"useCookiesForTransactions\",\n                \"useFormData\"\n            ]);\n        }(e);\n    }\n    return e.prototype._url = function(e) {\n        var t = encodeURIComponent(btoa(JSON.stringify(this.options.earthoOne || Rc)));\n        return \"\".concat(this.domainUrl).concat(e, \"&earthoOne=\").concat(t);\n    }, e.prototype.connectWithPopup = function(e, t) {\n        return o(this, void 0, void 0, function() {\n            var o, c, a, s, u, l, f, d, h, p, y, v;\n            return i(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        if (t = t || {}, !e.access_id) throw new Error(\"PopupConnectOptions.accessId must be defined\");\n                        if (!t.popup && (t.popup = function(e) {\n                            var t = window.screenX + (window.innerWidth - 400) / 2, n = window.screenY + (window.innerHeight - 610) / 2;\n                            return window.open(e, \"earthoOne:authorize:popup\", \"left=\".concat(t, \",top=\").concat(n, \",width=\").concat(400, \",height=\").concat(610, \",resizable,scrollbars=yes,status=1\"));\n                        }(\"\"), !t.popup)) throw new Error(\"Unable to open a popup for connectWithPopup - window.open returned `null`\");\n                        return o = r(e, []), c = Nc(Vc()), a = Nc(Vc()), s = Vc(), [\n                            4,\n                            Yc(s)\n                        ];\n                    case 1:\n                        return u = i.sent(), l = Mc(u), f = this._getParams(o, c, a, l, this.options.redirect_uri || window.location.origin, e.access_id), d = this._connectUrl(n(n({}, f), {\n                            response_mode: \"web_message\"\n                        })), t.popup.location.href = d, [\n                            4,\n                            Zc(n(n({}, t), {\n                                timeoutInSeconds: t.timeoutInSeconds || this.options.authorizeTimeoutInSeconds || 360\n                            }))\n                        ];\n                    case 2:\n                        if (h = i.sent(), c !== h.state) throw new Error(\"Invalid state\");\n                        return [\n                            4,\n                            $c({\n                                audience: f.audience,\n                                scope: f.scope,\n                                baseUrl: \"https://api.eartho.world/access/oauth/token\",\n                                client_id: this.options.client_id,\n                                code_verifier: s,\n                                code: h.code,\n                                access_id: e.access_id,\n                                grant_type: \"authorization_code\",\n                                redirect_uri: f.redirect_uri,\n                                earthoOne: this.options.earthoOne,\n                                useFormData: this.options.useFormData,\n                                timeout: this.httpTimeoutMs\n                            }, this.worker)\n                        ];\n                    case 3:\n                        return p = i.sent(), [\n                            4,\n                            this._verifyIdToken(p.id_token, a)\n                        ];\n                    case 4:\n                        return y = i.sent(), v = n(n({}, p), {\n                            decodedToken: y,\n                            scope: f.scope,\n                            audience: f.audience || \"default\",\n                            client_id: this.options.client_id\n                        }), [\n                            4,\n                            this.cacheManager.set(v)\n                        ];\n                    case 5:\n                        return i.sent(), this.cookieStorage.save(this.isConnectedCookieName, !0, {\n                            daysUntilExpire: this.sessionCheckExpiryDays,\n                            cookieDomain: this.options.cookieDomain\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.handleRedirectCallback = function(e) {\n        return void 0 === e && (e = window.location.href), o(this, void 0, void 0, function() {\n            var t, r, o, a, s, u, l, f, d, h, p;\n            return i(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        if (0 === (t = e.split(\"?\").slice(1)).length) return [\n                            2\n                        ];\n                        if (r = function(e) {\n                            e.indexOf(\"#\") > -1 && (e = e.substr(0, e.indexOf(\"#\")));\n                            var t = e.split(\"&\"), n = {};\n                            return t.forEach(function(e) {\n                                var t = c(e.split(\"=\"), 2), r = t[0], o = t[1];\n                                n[r] = decodeURIComponent(o);\n                            }), n.expires_in && (n.expires_in = parseInt(n.expires_in)), n;\n                        }(t.join(\"\")), o = r.state, a = r.code, s = r.error, u = r.error_description, !o || !a) return [\n                            2\n                        ];\n                        if (!(l = this.transactionManager.get())) throw new Error(\"Invalid transactionManager state\");\n                        if (this.transactionManager.remove(), s) throw new Ac(s, u, o, l.appState);\n                        if (!l.code_verifier || l.state && l.state !== o) throw new Error(\"Invalid state \" + l.state + \" ~~ \" + o);\n                        return f = {\n                            audience: l.audience,\n                            scope: l.scope,\n                            baseUrl: \"https://api.eartho.world/access/oauth/token\",\n                            client_id: this.options.client_id,\n                            code_verifier: l.code_verifier,\n                            code: a,\n                            access_id: l.access_id,\n                            grant_type: \"authorization_code\",\n                            earthoOne: this.options.earthoOne,\n                            useFormData: this.options.useFormData,\n                            timeout: this.httpTimeoutMs\n                        }, void 0 !== l.redirect_uri && (f.redirect_uri = l.redirect_uri), [\n                            4,\n                            $c(f, this.worker)\n                        ];\n                    case 1:\n                        return d = i.sent(), [\n                            4,\n                            this._verifyIdToken(d.id_token, l.nonce)\n                        ];\n                    case 2:\n                        return h = i.sent(), [\n                            4,\n                            this.cacheManager.set(n(n(n(n({}, d), {\n                                decodedToken: h,\n                                audience: l.audience,\n                                scope: l.scope\n                            }), d.scope ? {\n                                oauthTokenScope: d.scope\n                            } : null), {\n                                client_id: this.options.client_id\n                            }))\n                        ];\n                    case 3:\n                        return i.sent(), this.cookieStorage.save(this.isConnectedCookieName, !0, {\n                            daysUntilExpire: this.sessionCheckExpiryDays,\n                            cookieDomain: this.options.cookieDomain\n                        }), p = location.href.split(\"?\")[0], window.history.pushState(\"object\", document.title, p), [\n                            2,\n                            {\n                                appState: l.appState\n                            }\n                        ];\n                }\n            });\n        });\n    }, e.prototype.connectWithRedirect = function(e) {\n        return void 0 === e && (e = {}), o(this, void 0, void 0, function() {\n            var t, n, o;\n            return i(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        return t = e.redirectMethod, n = r(e, [\n                            \"redirectMethod\"\n                        ]), [\n                            4,\n                            this.buildConnectUrl(n)\n                        ];\n                    case 1:\n                        return o = i.sent(), window.location[t || \"assign\"](o), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.getIdToken = function(e) {\n        return void 0 === e && (e = {}), o(this, void 0, void 0, function() {\n            var t, o, c, a = this;\n            return i(this, function(i) {\n                return t = n(n({\n                    audience: this.options.audience,\n                    ignoreCache: !1\n                }, e), {\n                    scope: ta(this.defaultScope, this.scope, e.scope)\n                }), o = t.ignoreCache, c = r(t, [\n                    \"ignoreCache\"\n                ]), [\n                    2,\n                    Oa(function() {\n                        return a._connectSilently(n({\n                            ignoreCache: o\n                        }, c));\n                    }, \"\".concat(this.options.client_id, \"::\").concat(c.audience, \"::\").concat(c.scope))\n                ];\n            });\n        });\n    }, e.prototype.connectSilently = function(e) {\n        return void 0 === e && (e = {}), o(this, void 0, void 0, function() {\n            var t, o, c, a = this;\n            return i(this, function(i) {\n                return t = n(n({\n                    audience: this.options.audience,\n                    ignoreCache: !1\n                }, e), {\n                    scope: ta(this.defaultScope, this.scope, e.scope)\n                }), o = t.ignoreCache, c = r(t, [\n                    \"ignoreCache\"\n                ]), [\n                    2,\n                    Oa(function() {\n                        return a._connectSilently(n({\n                            ignoreCache: o\n                        }, c));\n                    }, \"\".concat(this.options.client_id, \"::\").concat(c.audience, \"::\").concat(c.scope))\n                ];\n            });\n        });\n    }, e.prototype._connectSilently = function(e) {\n        return void 0 === e && (e = {}), o(this, void 0, void 0, function() {\n            var t, c, a, s, u, l, f, d;\n            return i(this, function(h) {\n                switch(h.label){\n                    case 0:\n                        return t = e.ignoreCache, c = r(e, [\n                            \"ignoreCache\"\n                        ]), t ? [\n                            3,\n                            2\n                        ] : [\n                            4,\n                            this._getEntryFromCache({\n                                scope: c.scope,\n                                audience: c.audience || \"default\",\n                                client_id: this.options.client_id,\n                                getDetailedEntry: e.detailedResponse\n                            })\n                        ];\n                    case 1:\n                        if (a = h.sent()) return [\n                            2,\n                            a\n                        ];\n                        h.label = 2;\n                    case 2:\n                        return [\n                            4,\n                            (p = function() {\n                                return Ta.acquireLock(\"earthoOne.lock.getTokenSilently\", 5e3);\n                            }, y = 10, void 0 === y && (y = 3), o(void 0, void 0, void 0, function() {\n                                var e;\n                                return i(this, function(t) {\n                                    switch(t.label){\n                                        case 0:\n                                            e = 0, t.label = 1;\n                                        case 1:\n                                            return e < y ? [\n                                                4,\n                                                p()\n                                            ] : [\n                                                3,\n                                                4\n                                            ];\n                                        case 2:\n                                            if (t.sent()) return [\n                                                2,\n                                                !0\n                                            ];\n                                            t.label = 3;\n                                        case 3:\n                                            return e++, [\n                                                3,\n                                                1\n                                            ];\n                                        case 4:\n                                            return [\n                                                2,\n                                                !1\n                                            ];\n                                    }\n                                });\n                            }))\n                        ];\n                    case 3:\n                        if (!h.sent()) return [\n                            3,\n                            12\n                        ];\n                        h.label = 4;\n                    case 4:\n                        return h.trys.push([\n                            4,\n                            ,\n                            9,\n                            11\n                        ]), t ? [\n                            3,\n                            6\n                        ] : [\n                            4,\n                            this._getEntryFromCache({\n                                scope: c.scope,\n                                audience: c.audience || \"default\",\n                                client_id: this.options.client_id,\n                                getDetailedEntry: e.detailedResponse\n                            })\n                        ];\n                    case 5:\n                        if (a = h.sent()) return [\n                            2,\n                            a\n                        ];\n                        h.label = 6;\n                    case 6:\n                        return [\n                            4,\n                            this._getTokenUsingRefreshToken(c)\n                        ];\n                    case 7:\n                        return s = h.sent(), [\n                            4,\n                            this.cacheManager.set(n({\n                                client_id: this.options.client_id\n                            }, s))\n                        ];\n                    case 8:\n                        return h.sent(), this.cookieStorage.save(this.isConnectedCookieName, !0, {\n                            daysUntilExpire: this.sessionCheckExpiryDays,\n                            cookieDomain: this.options.cookieDomain\n                        }), e.detailedResponse ? (u = s.id_token, l = s.access_token, f = s.oauthTokenScope, d = s.expires_in, [\n                            2,\n                            n(n({\n                                id_token: u,\n                                access_token: l\n                            }, f ? {\n                                scope: f\n                            } : null), {\n                                expires_in: d\n                            })\n                        ]) : [\n                            2,\n                            s.id_token\n                        ];\n                    case 9:\n                        return [\n                            4,\n                            Ta.releaseLock(\"earthoOne.lock.getTokenSilently\")\n                        ];\n                    case 10:\n                        return h.sent(), [\n                            7\n                        ];\n                    case 11:\n                        return [\n                            3,\n                            13\n                        ];\n                    case 12:\n                        throw new Fc;\n                    case 13:\n                        return [\n                            2\n                        ];\n                }\n                var p, y;\n            });\n        });\n    }, e.prototype.getUser = function(e) {\n        return void 0 === e && (e = {}), o(this, void 0, void 0, function() {\n            var t, n, r;\n            return i(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        return t = e.audience || this.options.audience || \"default\", n = ta(this.defaultScope, this.scope, e.scope), [\n                            4,\n                            this.cacheManager.get(new na({\n                                client_id: this.options.client_id,\n                                audience: t,\n                                scope: n\n                            }))\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            (r = o.sent()) && r.decodedToken && r.decodedToken.user\n                        ];\n                }\n            });\n        });\n    }, e.prototype.isConnected = function() {\n        return o(this, void 0, void 0, function() {\n            return i(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.getUser()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            !!e.sent()\n                        ];\n                }\n            });\n        });\n    }, e.prototype.checkSession = function(e) {\n        return o(this, void 0, void 0, function() {\n            var t;\n            return i(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        if (!this.cookieStorage.get(this.isConnectedCookieName)) {\n                            if (!this.cookieStorage.get(\"earthoOne.is.authenticated\")) return [\n                                2\n                            ];\n                            this.cookieStorage.save(this.isConnectedCookieName, !0, {\n                                daysUntilExpire: this.sessionCheckExpiryDays,\n                                cookieDomain: this.options.cookieDomain\n                            }), this.cookieStorage.remove(\"earthoOne.is.authenticated\");\n                        }\n                        n.label = 1;\n                    case 1:\n                        return n.trys.push([\n                            1,\n                            3,\n                            ,\n                            4\n                        ]), [\n                            4,\n                            this.connectSilently(e)\n                        ];\n                    case 2:\n                        return n.sent(), [\n                            3,\n                            4\n                        ];\n                    case 3:\n                        if (t = n.sent(), !jc.includes(t.error)) throw t;\n                        return [\n                            3,\n                            4\n                        ];\n                    case 4:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.buildLogoutUrl = function(e) {\n        void 0 === e && (e = {}), null !== e.client_id ? e.client_id = e.client_id || this.options.client_id : delete e.client_id;\n        var t = e.federated, n = r(e, [\n            \"federated\"\n        ]), o = t ? \"&federated\" : \"\";\n        return this._url(\"/v2/logout?\".concat(Dc(n))) + o;\n    }, e.prototype.logout = function(e) {\n        var t = this;\n        void 0 === e && (e = {});\n        var n = e.localOnly, o = r(e, [\n            \"localOnly\"\n        ]);\n        if (n && o.federated) throw new Error(\"It is invalid to set both the `federated` and `localOnly` options to `true`\");\n        var i = function() {\n            t.cookieStorage.remove(t.orgHintCookieName), t.cookieStorage.remove(t.isConnectedCookieName), n || t.buildLogoutUrl(o);\n        };\n        if (this.options.cache) return this.cacheManager.clear().then(function() {\n            return i();\n        });\n        this.cacheManager.clearSync(), i();\n    }, e.prototype._getTokenUsingRefreshToken = function(e) {\n        return o(this, void 0, void 0, function() {\n            var t, o, c, a, s, u, l, f, d;\n            return i(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        return e.scope = ta(this.defaultScope, this.options.scope, e.scope), [\n                            4,\n                            this.cacheManager.get(new na({\n                                scope: e.scope,\n                                audience: e.audience || \"default\",\n                                client_id: this.options.client_id\n                            }))\n                        ];\n                    case 1:\n                        if (!((t = i.sent()) && t.refresh_token || this.worker)) throw {\n                            error: \"login_required\",\n                            error_message: \"Login required\"\n                        };\n                        o = e.redirect_uri || this.options.redirect_uri || window.location.origin, a = e.scope, s = e.audience, u = r(e, [\n                            \"scope\",\n                            \"audience\",\n                            \"ignoreCache\",\n                            \"timeoutInSeconds\",\n                            \"detailedResponse\"\n                        ]), l = \"number\" == typeof e.timeoutInSeconds ? 1e3 * e.timeoutInSeconds : null, i.label = 2;\n                    case 2:\n                        return i.trys.push([\n                            2,\n                            4,\n                            ,\n                            5\n                        ]), [\n                            4,\n                            $c(n(n(n(n(n({}, this.customOptions), u), {\n                                audience: s,\n                                scope: a,\n                                baseUrl: \"https://api.eartho.world/access/oauth/refreshtoken\",\n                                client_id: this.options.client_id,\n                                grant_type: \"refresh_token\",\n                                access_id: \"\",\n                                refresh_token: t && t.refresh_token,\n                                redirect_uri: o\n                            }), l && {\n                                timeout: l\n                            }), {\n                                earthoOne: this.options.earthoOne,\n                                useFormData: this.options.useFormData,\n                                timeout: this.httpTimeoutMs\n                            }), this.worker)\n                        ];\n                    case 3:\n                        return c = i.sent(), [\n                            3,\n                            5\n                        ];\n                    case 4:\n                        throw \"The web worker is missing the refresh token\" === (f = i.sent()).message || f.message && f.message.indexOf(\"invalid refresh token\"), f;\n                    case 5:\n                        return [\n                            4,\n                            this._verifyIdToken(c.id_token)\n                        ];\n                    case 6:\n                        return d = i.sent(), [\n                            2,\n                            n(n({}, c), {\n                                decodedToken: d,\n                                scope: e.scope,\n                                oauthTokenScope: c.scope,\n                                audience: e.audience || \"default\"\n                            })\n                        ];\n                }\n            });\n        });\n    }, e.prototype._getEntryFromCache = function(e) {\n        var t = e.scope, r = e.audience, c = e.client_id, a = e.getDetailedEntry, s = void 0 !== a && a;\n        return o(this, void 0, void 0, function() {\n            var e, o, a, u, l;\n            return i(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        return [\n                            4,\n                            this.cacheManager.get(new na({\n                                scope: t,\n                                audience: r,\n                                client_id: c\n                            }), 60)\n                        ];\n                    case 1:\n                        return (e = i.sent()) && e.id_token ? s ? (o = e.id_token, a = e.access_token, u = e.oauthTokenScope, l = e.expires_in, [\n                            2,\n                            n(n({\n                                id_token: o,\n                                access_token: a\n                            }, u ? {\n                                scope: u\n                            } : null), {\n                                expires_in: l\n                            })\n                        ]) : [\n                            2,\n                            e.id_token\n                        ] : [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype._getParams = function(e, t, o, i, c, a) {\n        var s = this.options;\n        s.useRefreshTokens, s.useCookiesForTransactions, s.useFormData, s.earthoOne;\n        var u = s.enabledProviders;\n        s.cacheLocation, s.advancedOptions, s.detailedResponse, s.nowProvider, s.authorizeTimeoutInSeconds, s.legacySameSiteCookie, s.sessionCheckExpiryDays, s.domain, s.leeway, s.httpTimeoutInSeconds;\n        var l = r(s, [\n            \"useRefreshTokens\",\n            \"useCookiesForTransactions\",\n            \"useFormData\",\n            \"earthoOne\",\n            \"enabledProviders\",\n            \"cacheLocation\",\n            \"advancedOptions\",\n            \"detailedResponse\",\n            \"nowProvider\",\n            \"authorizeTimeoutInSeconds\",\n            \"legacySameSiteCookie\",\n            \"sessionCheckExpiryDays\",\n            \"domain\",\n            \"leeway\",\n            \"httpTimeoutInSeconds\"\n        ]);\n        return n(n(n({}, l), e), {\n            scope: ta(this.defaultScope, this.scope, e.scope),\n            response_type: \"code\",\n            response_mode: \"query\",\n            state: t,\n            nonce: o,\n            redirect_uri: c || this.options.redirect_uri,\n            access_id: a,\n            enabled_providers: u,\n            code_challenge: i,\n            code_challenge_method: \"S256\"\n        });\n    }, e.prototype._connectUrl = function(e) {\n        return this._url(\"/connect?\".concat(Dc(e)));\n    }, e.prototype._verifyIdToken = function(e, t) {\n        return o(this, void 0, void 0, function() {\n            var n;\n            return i(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.nowProvider()\n                        ];\n                    case 1:\n                        return n = r.sent(), [\n                            2,\n                            ua({\n                                iss: this.tokenIssuer,\n                                aud: this.options.client_id,\n                                id_token: e,\n                                nonce: t,\n                                leeway: this.options.leeway,\n                                max_age: this._parseNumber(this.options.max_age),\n                                now: n\n                            })\n                        ];\n                }\n            });\n        });\n    }, e.prototype._parseNumber = function(e) {\n        return \"string\" != typeof e ? e : parseInt(e, 10) || void 0;\n    }, e.prototype.buildConnectUrl = function(e) {\n        return void 0 === e && (e = {}), o(this, void 0, void 0, function() {\n            var t, n, o, c, a, s, u, l, f, d, h, p;\n            return i(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        return t = e.redirect_uri, n = e.access_id, o = e.appState, c = r(e, [\n                            \"redirect_uri\",\n                            \"access_id\",\n                            \"appState\"\n                        ]), a = Nc(Vc()), s = Nc(Vc()), u = Vc(), [\n                            4,\n                            Yc(u)\n                        ];\n                    case 1:\n                        return l = i.sent(), f = Mc(l), d = e.fragment ? \"#\".concat(e.fragment) : \"\", h = this._getParams(c, a, s, f, t, n), p = this._connectUrl(h), this.transactionManager.create({\n                            nonce: s,\n                            code_verifier: u,\n                            appState: o,\n                            access_id: n,\n                            scope: h.scope,\n                            audience: h.audience || \"default\",\n                            redirect_uri: h.redirect_uri,\n                            state: a\n                        }), [\n                            2,\n                            p + d\n                        ];\n                }\n            });\n        });\n    }, e;\n}(), Ra = function() {};\n/**\r\n * The initial auth state.\r\n */ var initialAuthState = {\n    isConnected: false,\n    isLoading: true\n};\n/**\r\n * @ignore\r\n */ var stub = function() {\n    throw new Error(\"You forgot to wrap your component in <EarthoOneProvider>.\");\n};\n/**\r\n * @ignore\r\n */ var initialContext = __assign(__assign({}, initialAuthState), {\n    getIdToken: stub,\n    getUser: stub,\n    connectWithPopup: stub,\n    connectWithRedirect: stub,\n    logout: stub,\n    handleRedirectCallback: stub\n});\n/**\r\n * The Eartho Context\r\n */ var EarthoOneContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialContext);\n/**\r\n * An OAuth2 error will come from the authorization server and will have at least an `error` property which will\r\n * be the error code. And possibly an `error_description` property\r\n *\r\n * See: https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3.1.2.6\r\n */ var OAuthError = /** @class */ function(_super) {\n    __extends(OAuthError, _super);\n    function OAuthError(error, error_description) {\n        var _this = _super.call(this, error_description || error) || this;\n        _this.error = error;\n        _this.error_description = error_description;\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(_this, OAuthError.prototype);\n        return _this;\n    }\n    return OAuthError;\n}(Error);\nvar CODE_RE = /[?&]code=[^&]+/;\nvar STATE_RE = /[?&]state=[^&]+/;\nvar ERROR_RE = /[?&]error=[^&]+/;\nvar hasAuthParams = function(searchParams) {\n    if (searchParams === void 0) {\n        searchParams = window.location.search;\n    }\n    return (CODE_RE.test(searchParams) || ERROR_RE.test(searchParams)) && STATE_RE.test(searchParams);\n};\nvar normalizeErrorFn = function(fallbackMessage) {\n    return function(error) {\n        if (\"error\" in error) {\n            return new OAuthError(error.error, error.error_description);\n        }\n        if (error instanceof Error) {\n            return error;\n        }\n        return new Error(fallbackMessage);\n    };\n};\nvar loginError = normalizeErrorFn(\"Login failed\");\nvar tokenError = normalizeErrorFn(\"Get access token failed\");\n/**\r\n * Handles how that state changes in the `useEarthoOne` hook.\r\n */ var reducer = function(state, action) {\n    var _a, _b;\n    switch(action.type){\n        case \"LOGIN_POPUP_STARTED\":\n            return __assign(__assign({}, state), {\n                isLoading: true\n            });\n        case \"LOGIN_POPUP_COMPLETE\":\n        case \"INITIALISED\":\n            return __assign(__assign({}, state), {\n                isConnected: !!action.user,\n                user: action.user,\n                isLoading: false,\n                error: undefined\n            });\n        case \"HANDLE_REDIRECT_COMPLETE\":\n        case \"GET_ACCESS_TOKEN_COMPLETE\":\n            if (((_a = state.user) === null || _a === void 0 ? void 0 : _a.updated_at) === ((_b = action.user) === null || _b === void 0 ? void 0 : _b.updated_at)) {\n                return state;\n            }\n            return __assign(__assign({}, state), {\n                isConnected: !!action.user,\n                user: action.user\n            });\n        case \"LOGOUT\":\n            return __assign(__assign({}, state), {\n                isConnected: false,\n                user: undefined\n            });\n        case \"ERROR\":\n            return __assign(__assign({}, state), {\n                isLoading: false,\n                error: action.error\n            });\n    }\n};\n/**\r\n * @ignore\r\n */ var toEarthoOneOptions = function(opts) {\n    var clientId = opts.clientId, redirectUri = opts.redirectUri, maxAge = opts.maxAge, validOpts = __rest(opts, [\n        \"clientId\",\n        \"redirectUri\",\n        \"maxAge\"\n    ]);\n    return __assign(__assign({}, validOpts), {\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        max_age: maxAge,\n        earthoOneClient: {\n            name: \"one-client-react\",\n            version: \"1.1.6\"\n        }\n    });\n};\n/**\r\n * @ignore\r\n */ var toEarthoOneLoginRedirectOptions = function(opts) {\n    if (!opts) {\n        return;\n    }\n    var redirectUri = opts.redirectUri, validOpts = __rest(opts, [\n        \"redirectUri\"\n    ]);\n    return __assign(__assign({}, validOpts), {\n        redirect_uri: redirectUri\n    });\n};\n/**\r\n * @ignore\r\n */ var defaultOnRedirectCallback = function(appState) {\n    window.history.replaceState({}, document.title, (appState === null || appState === void 0 ? void 0 : appState.returnTo) || window.location.pathname);\n};\n/**\r\n * ```jsx\r\n * <EarthoOneProvider\r\n *   clientId={clientId}\r\n *   redirectUri={window.location.origin}>\r\n *   <MyApp />\r\n * </EarthoOneProvider>\r\n * ```\r\n *\r\n * Provides the EarthoOneContext to its child components.\r\n */ var EarthoOneProvider = function(opts) {\n    var children = opts.children, skipRedirectCallback = opts.skipRedirectCallback, _a = opts.onRedirectCallback, onRedirectCallback = _a === void 0 ? defaultOnRedirectCallback : _a, clientOpts = __rest(opts, [\n        \"children\",\n        \"skipRedirectCallback\",\n        \"onRedirectCallback\"\n    ]);\n    var client = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function() {\n        return new ja(toEarthoOneOptions(clientOpts));\n    })[0];\n    var _b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducer, initialAuthState), state = _b[0], dispatch = _b[1];\n    var didInitialise = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (didInitialise.current) {\n            return;\n        }\n        didInitialise.current = true;\n        (function() {\n            return __awaiter(void 0, void 0, void 0, function() {\n                var appState, user, error_1;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            _a.trys.push([\n                                0,\n                                6,\n                                ,\n                                7\n                            ]);\n                            if (!(hasAuthParams() && !skipRedirectCallback)) return [\n                                3 /*break*/ ,\n                                2\n                            ];\n                            return [\n                                4 /*yield*/ ,\n                                client.handleRedirectCallback()\n                            ];\n                        case 1:\n                            appState = _a.sent().appState;\n                            onRedirectCallback(appState);\n                            return [\n                                3 /*break*/ ,\n                                4\n                            ];\n                        case 2:\n                            return [\n                                4 /*yield*/ ,\n                                client.checkSession()\n                            ];\n                        case 3:\n                            _a.sent();\n                            _a.label = 4;\n                        case 4:\n                            return [\n                                4 /*yield*/ ,\n                                client.getUser()\n                            ];\n                        case 5:\n                            user = _a.sent();\n                            dispatch({\n                                type: \"INITIALISED\",\n                                user: user\n                            });\n                            return [\n                                3 /*break*/ ,\n                                7\n                            ];\n                        case 6:\n                            error_1 = _a.sent();\n                            dispatch({\n                                type: \"ERROR\",\n                                error: loginError(error_1)\n                            });\n                            return [\n                                3 /*break*/ ,\n                                7\n                            ];\n                        case 7:\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        })();\n    }, [\n        client,\n        onRedirectCallback,\n        skipRedirectCallback\n    ]);\n    var buildLogoutUrl = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(opts) {\n        return client.buildLogoutUrl(opts);\n    }, [\n        client\n    ]);\n    var connectWithRedirect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(opts) {\n        return client.connectWithRedirect(toEarthoOneLoginRedirectOptions(opts));\n    }, [\n        client\n    ]);\n    var connectWithPopup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(options, config) {\n        return __awaiter(void 0, void 0, void 0, function() {\n            var error_2, user;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        dispatch({\n                            type: \"LOGIN_POPUP_STARTED\"\n                        });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([\n                            1,\n                            3,\n                            ,\n                            4\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            client.connectWithPopup(options, config)\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                    case 3:\n                        error_2 = _a.sent();\n                        dispatch({\n                            type: \"ERROR\",\n                            error: loginError(error_2)\n                        });\n                        return [\n                            2 /*return*/ \n                        ];\n                    case 4:\n                        return [\n                            4 /*yield*/ ,\n                            client.getUser()\n                        ];\n                    case 5:\n                        user = _a.sent();\n                        dispatch({\n                            type: \"LOGIN_POPUP_COMPLETE\",\n                            user: user\n                        });\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    }, [\n        client\n    ]);\n    var logout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(opts) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        var maybePromise = client.logout(opts);\n        if (opts.localOnly) {\n            if (maybePromise && typeof maybePromise.then === \"function\") {\n                return maybePromise.then(function() {\n                    return dispatch({\n                        type: \"LOGOUT\"\n                    });\n                });\n            }\n            dispatch({\n                type: \"LOGOUT\"\n            });\n        }\n        return maybePromise;\n    }, [\n        client\n    ]);\n    var getIdToken = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function(opts) {\n        return __awaiter(void 0, void 0, void 0, function() {\n            var token, error_3, _a;\n            var _b;\n            return __generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        _c.trys.push([\n                            0,\n                            2,\n                            3,\n                            5\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            client.connectSilently(opts)\n                        ];\n                    case 1:\n                        token = _c.sent();\n                        return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                    case 2:\n                        error_3 = _c.sent();\n                        throw tokenError(error_3);\n                    case 3:\n                        _a = dispatch;\n                        _b = {\n                            type: \"GET_ACCESS_TOKEN_COMPLETE\"\n                        };\n                        return [\n                            4 /*yield*/ ,\n                            client.getUser()\n                        ];\n                    case 4:\n                        _a.apply(void 0, [\n                            (_b.user = _c.sent(), _b)\n                        ]);\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 5:\n                        return [\n                            2 /*return*/ ,\n                            token\n                        ];\n                }\n            });\n        });\n    }, [\n        client\n    ]);\n    var getUser = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(opts) {\n        return client.getUser(opts);\n    }, [\n        client\n    ]);\n    var handleRedirectCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(url) {\n        return __awaiter(void 0, void 0, void 0, function() {\n            var error_4, _a;\n            var _b;\n            return __generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        _c.trys.push([\n                            0,\n                            2,\n                            3,\n                            5\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            client.handleRedirectCallback(url)\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _c.sent()\n                        ];\n                    case 2:\n                        error_4 = _c.sent();\n                        throw tokenError(error_4);\n                    case 3:\n                        _a = dispatch;\n                        _b = {\n                            type: \"HANDLE_REDIRECT_COMPLETE\"\n                        };\n                        return [\n                            4 /*yield*/ ,\n                            client.getUser()\n                        ];\n                    case 4:\n                        _a.apply(void 0, [\n                            (_b.user = _c.sent(), _b)\n                        ]);\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 5:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    }, [\n        client\n    ]);\n    var contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return __assign(__assign({}, state), {\n            buildLogoutUrl: buildLogoutUrl,\n            getIdToken: getIdToken,\n            getUser: getUser,\n            connectWithRedirect: connectWithRedirect,\n            connectWithPopup: connectWithPopup,\n            logout: logout,\n            handleRedirectCallback: handleRedirectCallback\n        });\n    }, [\n        state,\n        buildLogoutUrl,\n        getIdToken,\n        getUser,\n        connectWithRedirect,\n        connectWithPopup,\n        logout,\n        handleRedirectCallback\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(EarthoOneContext.Provider, {\n        value: contextValue\n    }, children);\n};\n/**\r\n * ```js\r\n * const {\r\n *   // Auth state:\r\n *   error,\r\n *   isConnected,\r\n *   isLoading,\r\n *   user,\r\n *   // Auth methods:\r\n *   getIdToken,\r\n *   getUser,\r\n *   connectWithPopup,\r\n *   loginWithPopup,\r\n *   logout,\r\n * } = useEarthoOne<TUser>();\r\n * ```\r\n *\r\n * Use the `useEarthoOne` hook in your components to access the auth state and methods.\r\n *\r\n * TUser is an optional type param to provide a type to the `user` field.\r\n */ var useEarthoOne = function() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EarthoOneContext);\n};\n/**\r\n * ```jsx\r\n * class MyComponent extends Component {\r\n *   render() {\r\n *     // Access the auth context from the `eartho` prop\r\n *     const { user } = this.props.eartho;\r\n *     return <div>Hello {user.name}!</div>\r\n *   }\r\n * }\r\n * // Wrap your class component in withEarthoOne\r\n * export default withEarthoOne(MyComponent);\r\n * ```\r\n *\r\n * Wrap your class components in this Higher Order Component to give them access to the EarthoOneContext\r\n */ var withEarthoOne = function(Component) {\n    return function WithAuth(props) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(EarthoOneContext.Consumer, null, function(auth) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, __assign({}, props, {\n                eartho: auth\n            }));\n        });\n    };\n};\n/**\r\n * @ignore\r\n */ var defaultOnRedirecting = function() {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null);\n};\n/**\r\n * @ignore\r\n */ var defaultReturnTo = function() {\n    return \"\".concat(window.location.pathname).concat(window.location.search);\n};\n/**\r\n * ```js\r\n * const MyProtectedComponent = withAuthenticationRequired(MyComponent);\r\n * ```\r\n *\r\n * When you wrap your components in this Higher Order Component and an anonymous user visits your component\r\n * they will be redirected to the login page and returned to the page they we're redirected from after login.\r\n */ var withAuthenticationRequired = function(Component, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return function WithAuthenticationRequired(props) {\n        var _this = this;\n        var _a = useEarthoOne(), user = _a.user, isConnected = _a.isConnected, isLoading = _a.isLoading, connectWithRedirect = _a.connectWithRedirect;\n        var _b = options.returnTo, returnTo = _b === void 0 ? defaultReturnTo : _b, _c = options.onRedirecting, onRedirecting = _c === void 0 ? defaultOnRedirecting : _c, _d = options.claimCheck, claimCheck = _d === void 0 ? function() {\n            return true;\n        } : _d, loginOptions = options.loginOptions;\n        /**\r\n         * The route is authenticated if the user has valid auth and there are no\r\n         * JWT claim mismatches.\r\n         */ var routeIsAuthenticated = isConnected && claimCheck(user);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n            if (isLoading || routeIsAuthenticated) {\n                return;\n            }\n            var opts = __assign(__assign({}, loginOptions), {\n                appState: __assign(__assign({}, loginOptions && loginOptions.appState), {\n                    returnTo: typeof returnTo === \"function\" ? returnTo() : returnTo\n                })\n            });\n            (function() {\n                return __awaiter(_this, void 0, void 0, function() {\n                    return __generator(this, function(_a) {\n                        switch(_a.label){\n                            case 0:\n                                return [\n                                    4 /*yield*/ ,\n                                    connectWithRedirect(opts)\n                                ];\n                            case 1:\n                                _a.sent();\n                                return [\n                                    2 /*return*/ \n                                ];\n                        }\n                    });\n                });\n            })();\n        }, [\n            isLoading,\n            routeIsAuthenticated,\n            connectWithRedirect,\n            loginOptions,\n            returnTo\n        ]);\n        return routeIsAuthenticated ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, __assign({}, props)) : onRedirecting();\n    };\n};\n //# sourceMappingURL=one-client-react.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@eartho/one-client-react/dist/one-client-react.esm.js\n");

/***/ })

};
;